2/20/16

http://www.mattgreer.org/articles/a-game-made-with-reagent/ talks about using css animations; TODO

https://rafalcieslak.svbtle.com/9-tips-for-clojurescript-beginners has a few good links
mentions checkout dependencies

======

2/21/16

https://developer.mozilla.org/en-US/docs/Games/Techniques/Efficient_animation_for_web_games
****** this article appears to be super good
has tips on how to avoid drawing things multiple times per frame (which would be a waste)
mentions https://github.com/BernieSumption/animator.js which is super old
cf http://blog.berniesumption.com/software/animator/
" For a modern library that exposes CSS animations through a similar API, I recommend jQuery.Transit."
so maybe the mdn article above is real out of date?

https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame

anyway tbh i think i should probably be using canvas instead of svg for a bullet-hell shooter/rpg
i think reagent+svg/divs/whatever makes tons of sense for turn-based games like cljstone
but for a boi clone, it really seems like square peg round hole

css/svg/etc animation links for later if i end up wanting them:
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions

anyway overall it looks like css transformations/animations are useful for situations where, like,
you've got a particular UI that you want to animate - but i don't think they're at all relevant for
a game in a web browser, it just doesn't make any sense

re: reagent and canvas (already expected these two wouldn't work together):
https://www.reddit.com/r/Clojure/comments/3cq5hg/can_reagent_components_work_with_html_canvas/
"No, and I've tried: https://github.com/gzmask/embodier-gcode-webgl"


canvas resources:
https://github.com/rm-hull/monet [seems abandoned; TODO read anyway, might have good ideas]

core.async and keyboard events: https://github.com/bdrillard/async-key-events

had trouble getting access to goog.events.KeyCodes, was given
http://clojurescriptmadeeasy.com/blog/when-do-i-use-require-vs-import.html in slack

TODO what the hell is an entity component system
https://github.com/markmandel/brute
https://github.com/muhuk/clecs
https://github.com/weavejester/ittyon

TODO what is http://wercker.com/

http://hueypetersen.com/posts/2016/02/13/om-next-from-a-relay-graphql-perspective/
incomprehensible om.next/relay/redux/graphql post

https://eklitzke.org/effectively-using-bash-profile evan notes on .bash_profile vs .bashrc

http://hueypetersen.com/posts/2013/08/02/the-state-machines-of-core-async/ core.async implementation
http://hueypetersen.com/posts/2013/07/10/code-read-of-core-async-timeouts/ also good post on timeout!

http://hueypetersen.com/posts/2013/06/17/angular_is_slow/ - unrelated, but good quote:
"Your model is not your view model. It can be for simple cases, but as soon as you start feeling
friction you want to let the view model evolve instead of changing your domain models to suit the view."
****** gold stuff

ok so what is https://github.com/pedestal/pedestal
i remember this being announced at clojure/west a while back but don't know anything about it
lol "Our primary focus for the near future is Pedestal documentation, sample applications and
improving general ease of use."
so i think i can be forgiven for closing this tab and checking back later
https://github.com/pedestal/pedestal/tree/master/guides/documentation for the record

edmund says to use https://github.com/edmund-huber/sssgen for my blog
i'm sure he's not biased

https://en.wikipedia.org/wiki/Entity_component_system - see "game example" section
really good info
one of the main touted advantages is "composability instead of inheritance" - so is ECS still relevant in cljs?
the description of components sounds a lot like clj/s protocols

https://stackoverflow.com/questions/1901251/component-based-game-engine-design
the guy in that answer says use FRP instead of ECS

https://web.archive.org/web/20140719094839/http://www.altdev.co/2011/10/08/a-handful-of-components/
********* good shit
"The health component is probably the component that I re-use the most. Not just a health value that goes up
and down it also keeps track of invulnerability, regeneration and poison. It also looks after the entities
damage modifies with the following types currently supported Fire, Ice, Melee, Projectile, Magic and Crushing"

notes before i forget

what does game state end up looking like? do we end up adopting some ecs concepts and going with like

state: {:entities [Entity]}
Entity: {:id s/Int
         :components [Component]}

having an id helps for generating ^keys
what do rooms look like? are they some sort of, like, container components?
or do we have an :entities list and a :rooms list? the player's only in one room at a time if that's relevant

=======

2/22/16

https://www.youtube.com/watch?v=9sc8Pyc51uU
******* great talk on graphql / relay

https://github.com/devknoll/graphql-resources graphql links

https://www.youtube.com/watch?v=UoZyyo2Bwr8 talk on hoplon/javelin
difficult to tell how to reason about it with regard to reagent
he trashtalks the virtual dom for a while but i don't think all his criticisms apply
not a super big fan of the tone of this talk in general, the tech looks useful but not much different from reagent

reading https://github.com/evancz/elm-architecture-tutorial/

TODO for boi what will movement look like? does a player have a :bounding-box {x y width height} and a
:movement-state [:down :right]? that could work.

at some point i want to read the react dom-diffing code but i have 600 other tabs to process first

ok time for http://elm-lang.org/guide/reactivity
"Note: It is usually best to use signals as little as possible. When it comes to writing nice modular code,
you should primarily use normal functions and values. If you find yourself stuck with a signal of signals,
ask yourself “how can I model this explicitly with functions and values?”"

https://www.reddit.com/r/elm/comments/3s6lhb/learning_elm_vs_haskell_as_an_intro_to_functional/ elm vs haskell

reading http://elm-lang.org/blog/blazing-fast-html
"Virtual DOM sounds pretty slow, right? Create a whole new scene on every frame? This technique is actually
widely used in the game industry and performs shockingly well for DOM updates when you use two relatively
simple techniques: diffing and laziness." *******

"game industry" phrase links to https://en.wikipedia.org/wiki/Scene_graph

https://pchiusano.github.io/2014-07-02/css-is-unnecessary.html advocates using a lang like elm instead of css
"A little reflection on the history of software reveals abstraction as the primary means by which humans
make increasingly complex software possible and comprehensible."

https://news.ycombinator.com/item?id=9797973 om rant thread


************
okokok here's what i want to build
bullet-hell, twin-stick, top-down, boi-style combat/gameplay (except tear height, fuck that)
boi-style items
diablo-style levels (randomly generated floors rather than rooms; hallways, forests, whatever)
simple RoR-style leveling (don't care about skill trees / talents, just want to avoid staying at base damage
  forever like you often do in BoI)

updated state sketch
state: {:entities [Entity]
        :mode (s/enum :menu :loading :normal :etc)}
Entity: {:id s/Int
         :type (s/enum :player :bullet :monster :wall :etc)
         :components [Component]}

************

elm architecture notes:
https://gist.github.com/evancz/2b2ba366cae1887fe621
talks about advantages of having a centralized home of application state - single source of truth


what does main game loop look like?
*****
`
update-movement-state ; let monsters decide to aggro, leash, change their direction, etc
update-movement-speeds ; update dx, dy
update-positions ; update x, y (should we combine this with update-movement-speeds? unclear)
update-status-effects ; poison, invincibility, etc
calculate-collisions
update-health (? or does calculate-collisions do this? what does calculate-collisions do? add to a queue of
  unresolved collisions? something else?)
perform-attacks (player and monsters can have an :attacking state, with an :attacks-per-second or something)
`
******
what else?
can these things be done in parallel? how?
i guess you could have each use pmap instead of map, that could work pretty well actually

what does poisoning look like? a PoisonComponent and a poison-system?
maybe StatusEffects and an apply-status-effects system
i kinda like that a lot actually

bullets can't collide with other bullets
so there's an Owned component maybe

interesting notes on virtual dom / diffing: https://gist.github.com/Raynos/8414846
http://calendar.perfplanet.com/2013/diff/
good notes on setState effects, dirtiness setting, etc

http://t-machine.org/index.php/2012/03/16/entity-systems-what-makes-good-components-good-entities/
lots of example entities, components, systems

"Ideally, you add a new component when you have a new “dimension” to the game objects. For instance,
if you’re adding a physics System, you may not need to add any new Components – it might be that all
you need is Location (containing x,y,x position and dx,dy,dz velocity) and RenderState (containing
screen-pixels x,y) – and that you already have those components."

***** note re xyz position, dxdydz velocity ******

note warnings re: "Many systems per component" being a warning sign
the two versions of badness listed:

You have – say – 8 variables in the struct where you should instead have two structs (components),
one with 5 variables, the other with 3.
You have – say – 4 variables in the struct, but different systems are using those variables to mean
different things. It works OK for now, but it’s very fragile – as soon as the different meanings
diverge even a little, your code is going to start breaking

goood shit in this article man

in the comments:
"In regard to components a good idea at times is to stuff as much data into a single component that
covers the complete purpose. This cuts down referencing multiple components over and over and there
is definitely a speed up in a tight loop. A good example of this is physics where in my efforts I
provide a default “KinematicsParams” component that has velocity, position, rotation, angular velocity,
angular rotation, etc. etc. all stuffed into one data component. The reason being is that instead of
referencing a single component for each parameter it’s much easier / quicker to reference one."

"Q: What are the thoughts about having components that dont have any data, but instead exists to label
a entity in a way. A: I’m all for it."

http://t-machine.org/wp-content/uploads/Aliqua-progress-2015-BUUG-v3.pdf describes entity systems

via http://entity-systems.wikidot.com/ -
Entity - A container into which components can be added,
  ****usually hierarchical (any Entity can have sub-Entities).****

"Whereas in an inheritance-based design, an enemy may have a complex inheritance chain such as
Damageable <- Actor <- GroundBasedActor <- Enemy <- ZombieEnemy, in a C/ES-based design you might
have a Health component, a GroundBasedMovement component and a ZombieAi component added to
an entity named ZombieEnemy."

"Rendering and updating may take place either by traversing the entire entity tree (slow), by
having entities register themselves to the respective services (service locator hell) or in a
hybrid approach where the renderer/clock system remember which components they found in the tree
while entities merely provide a change notification if components are added to them or removed
from them, allowing the renderer/clock system to re-check that part of the tree (complex).
This aspect of the design is however not part of the C/ES pattern."

http://t-machine.org/index.php/2007/11/11/entity-systems-are-the-future-of-mmog-development-part-2/
definition of entities/components
"For every discernible “thing” in your game-world, you have one Entity. Entities have no data and no methods."

all this stuff is very clojure-y - clear separation + composition of data and behavior
"Typical Systems in a game would be: Rendering System, Animation System, Input System, etc.
 The Rendering system wakes up every 16 milliseconds, renders every Entity that has the Renderable
 Component, and then goes back to sleep."

"But the vast majority of game development is orders of magnitude more complex than Chess.
If you try – for instance – to write a computer game of Chess, that has AI … you certainly
don’t have “a movement and position component”.
Instead, you have: movement, position, potential positions this turn, potential positions on
future turns, threat radius, threatened squares, tactical options, strategic options, available
“plays” (famous chess strategies), enemy-histories-per-piece (what does your opponent tend
to do with pawns?) … etc."

http://t-machine.org/index.php/2007/12/22/entity-systems-are-the-future-of-mmog-development-part-3/
"So, don’t be tempted into hierarchical encoding, and definitely don’t do ANY encoding in the entity names"
“a System essentially provides the method-implementation for Components”.

components - data
systems - behavior
entities - id'd collections of data

"Mathematically-speaking, an Entity is a database Key, just as you’d see in any RDBMS.
Likewise, from a purely abstracted point of view, the “set of component-instances that comprise
Entity #7742” is, literally, a database Query.
THIS is why I said at the start that, ideally, you do NOT want to store your component-instances
as a list inside a struct/class representation of each Entity. Fundamentally, that set is NOT
defined as a list (a list is a static thing, it’s members don’t change without you changing them),
it’s defined as a query (whose members are always changing, whether you want them to or not),
and using one where really you wanted the other tends to cause problems in the long term."

hm - does all that still apply in clojure-land?
yeah prob not he says this is mainly for giant server-side games, which makes sense but
won't be super relevant for my tiny little client-side game

http://cowboyprogramming.com/2007/01/05/evolve-your-heirachy/
good article, not much different from the stuff above in t-machine
does have stories about introducing this design architecture into a preexisting system, neat

"Ideally, components should not know about each other. However, in a practical world, there
are always going to be dependencies between specific components. Performance issues also
dictate that components should be able to quickly access other components. Initially we had
all component references going through the component manager, however when this started using
up over 5% of our CPU time, we allowed the components to store pointers to one another, and
call member functions in other components directly."
hrm

http://scottbilas.com/files/2002/gdc_san_jose/game_objects_slides.pdf
"– Examples are trees, bushes, monsters, levers, waypoint markers, doors, heroes, inventory items
 – Many are “pure logic”, never see them (triggers, elevator movers, camera sequences)"

======

2/23/16

https://news.ycombinator.com/item?id=5116615 rant on ECS / clojure performance for games
fuck this guy tho

anyway i had a lot of ideas re: game this morning, jotting them down

current favorite name: voke (as in invoke, evoke, voco)

things i like about teleglitch:
punishing difficulty
setting/aesthetic (irrelevant, i'm not doing much art design here)
general terror about what's around the next corner
not so much into the crafting system, but was a fan of the health / armor system

bullets should be rectangular and thinnish rather than squares

if we end up making levels with hallways, i'm worried about the player cheesing the game by just
  funnelling all enemies through a hallway and shooting at them
i guess just don't have hallways?
what about doorways though?
i guess just have all doorways be way bigger than the player's/monsters' hitboxes, so monsters can always
  chase through really quickly

http://t-machine.org/index.php/2014/03/08/data-structures-for-entity-systems-contiguous-memory/
super good article
sort of unclear how to apply it to cljs tho

TODO - are deftypes/etc more performant than maps in cljs?

*****************
http://t-machine.org/index.php/2013/05/30/designing-bomberman-with-an-entity-system-which-components/
******* good shit
****** fuckin gold
"…if data should be in two components, but you can’t decide which: create a third component for it"
ok let's move all this stuff over to a new repo so i can start taking detailed game notes

ok per that post

behaviors:
move a player/monster/bullet in the direction is velocity indicates
player/monster runs into a wall, can't go farther in that direction
player/monster fires a bullet up/down/left/right
move a bullet along its vector
bullet collides with a player/monster, disappears, decrements health
monster/player collide, decrement player health
kill a player/monster
monster decides to aggro or leash
player/monster decides to change direction
player/monster decides to want to attack in a particular direction
player uses an active item
player picks up an item
camera moves to follow the player

data:
player/monster/bullet/wall collision-box
player/monster/bullet dx/dy velocity
player/monster/bullet top speed / acceleration
player intended move direction (8 options)
player intended fire direction (8 options)
monster intended move direction (360 degrees)
monster intended fire direction (360 degrees)
player/monster health
player armor
player xp
player/monster level
player inventory
player/monster bullet effects
bullets in flight
bullet owners
player/monster attack state [range, frequency, time since last shot]
item name and effect
camera
background


TODO how to take keyboard wasd/arrow input?

TODO look into public domain sprites for players/monsters/bullets/whatever

http://t-machine.org/index.php/2013/05/30/designing-bomberman-with-an-entity-system-which-components/comment-page-2/#comment-1274479
really great question
never gets an answer!

http://t-machine.org/index.php/2013/05/30/designing-bomberman-with-an-entity-system-which-components/comment-page-2/#comment-1274784
**********

http://t-machine.org/index.php/2012/04/19/concepts-of-object-identity-in-game-programming/
******* has notes on how systems can communicate with one another
eg kill enemy, enemy drops loot

*********
http://shaun.boyblack.co.za/blog/2012/08/04/games-and-entity-systems/ other guy's list of components/etc
******** GREAT post

http://www.richardlord.net/blog/what-is-an-entity-framework
ECS vs game loop
not much new info after i've read all the stuff linked above, but overall a great standalone post
"The collision system, which tests whether the player is colliding with other objects and
resolves those collisions."

"The systems are decoupled form each other. Each system knows only about itself and the data
it operates on. It knows and cares nothing at all about the other systems and how they may
have affected by or used the data before or after this system gets to work with it."
hm, discourages systems from communicating

but later...
"In most games, ***some*** of the systems are entirely independent of each other, including being
independent of the order in which they are applied. This makes it easy to run these systems in parallel."

anyway i mean i've been reading a bunch of this stuff and it's all cool and helpful but i'm not sure
how much of it applies in clojureland. in clojure you'd just be passing maps around to different functions
anyway, you'd have a clear separation of code and data, which is what ECS is all about.
so at the end of the day the main distinction is between, like, do i have game objects like this?

{:id 123
 :type :player
 :position a-position
 :velocity a-velocity
 :intended-movement-state an-intended-movement-state
 :firing-state a-firing-state
 etc
}

or do i have objects like this:

{:id 123
 :components [player-controlled, a-position, a-velocity, an-indended-firing-state]
}

ECS is all about the second option i think, although it's sort of six-one-half-dozen-other, maybe doens't matter.
might as well give it a shot

TODO - what does player-controlled look like? does it contain both intended movement direction
  and intended firing direction? what about active item usage, how does that work?

http://gameprogrammingpatterns.com/component.html
****** has a section on how components communicate with one another!!!!!!

"sending messages" - sounds familiar

so i guess the idea proposed here is that entities have a "send" function, and components have a
"receive" function
i mean that's all pretty OO
in clj, it'd probably look more like

(messaging/send an-entity-id a-message)

that seems reasonable

but what does it end up actually doing? like let's say we do
(messaging/send 1234 {:type :player-direction-input
                      :value :UP})

where does the code live that handles that message?
i guess you let components subscribe to specific types of messages and have some sort of "bus"
(what does that term even mean?) that coordinates all this; i know core.async has facilities along these lines

hm hm hm

"Some domains are distinct but still closely related. Think animation and rendering, user input
and AI, or physics and collision. If you have separate components for each half of those pairs,
you may find it easiest to just let them know directly about their other half.

Messaging is useful for “less important” communication. Its fire-and-forget nature is a good
fit for things like having an audio component play a sound when a physics component sends a
message that the object has collided with something."

hm i'm not sure about the messaging/send stuff from above

ok so what about if like for instance the physics component just adds a PendingAudio component
and the audio system looks for PendingAudio components on each tick, plays them, and removes them

and so the velocity component directly reads from the player-input component

and the player-input component is... directly sent messages via the UI?
hm how does it get its stuff

i guess the game's business logic is a module that has a clearly defined API
and only has a few specific public functions

(accept-player-input a-message)
(let-time-pass time-delta)

and so accept-player-input is a function that under the hood modifies components, and even then
just like the direction the player is intending to move and fire

and also i guess like (pause-game) etc

so what does the game's state currently look like?

{:entities [Entity]
 :mode Mode ; for pausing, menus, game over, whatever
 :active-level an-entity-id ;?
 ; maybe a channel but probably not, it can be local to the root reagent component
}

https://gamedev.stackexchange.com/questions/31473/what-is-the-role-of-systems-in-a-component-based-entity-architecture/31491#31491
not sure about the metaphor, but the main message is that systems can read from multiple components at once
*** for perf, it suggests having each entity have a bitfield indicating which components it has; that could work

https://github.com/ibdknox/ChromaShift/blob/master/cljs/game/levels/first.cljs
**** level built in clj with an ECS
"In ChromaShift's case the core structure and caches for the engine are actually written in
JavaScript for performance reasons, while all of the game CES is written in ClojureScript."

http://www.clojure-games.org/component-entity-system

https://github.com/muhuk/clecs-examples/blob/master/clecs-example-roguelike/src/clecs_example_roguelike/entities.clj
example entities/components

i like https://github.com/muhuk/clecs/blob/master/src/clecs/system.clj -
rather than having systems just be functions, he has them be maps
so in addition to a function that takes a world and returns a new one, he has other metadata too like
:name :rendering
:reads #{:Inventory :Renderable}
:writes #{:Inventory :Location}
interesting! overkill or helpful/necessary?

http://alexkehayias.tumblr.com/post/78711349238/entity-component-model-in-clojurescript
ecs with protocols/records

https://github.com/alexkehayias/chocolatier/ yet another system that talks a lot about:
"Think about it less as a bunch of objects with their own state and methods and more like
a database where you query for functionality, state, based on a certain aspect or entity."

i've seen this talk of databases+queries like 10 times now in reference to ECS, not sure
what i think about it

chocolatier has notes about cross-component communication
"A global pub-sub event queue is available for any component enabling cross component communication
without coupling the state of any of the components. For example, suppose the render component
needs to update the screen position of the player sprite. The render component needs information
from the input component, but we don't want to couple the state of either components together.
Instead of directly accessing the input component's state from the render component we subscribe
to messages about player movement and update based on that. We can broadcast that information without
any knowledge of who is listening to it and no one can change the component state from another component."

not sure i 100% agree with the components he's come up with, but anyway here's another bit of precedent
for messages / pubsub

"Any component can subscribe to events by creating a component with a :subscriptions key in the options
hashmap where each subscription is a vector of selectors:
 (mk-component state :player1 [component-f {:subscriptions [[:e1] [:e2]]}])
The subscribed component will receive the event in a hashmap in the :inbox key passed in as the
third argument to the component function. Messages that are sent are available immediately to
the subscriber which allows for events to be sent and received within the same frame and are
therefore order dependent."

interesting

"ClojureScript presents challenges for optimization including garbage collection, persistent
data structures, and functional paradigms that js engines may have difficulty optimizing."
eep

"Where appropriate, transient state should be used when operating on large collections and
hashmaps for better performance. See chocolatier.macros in the clj source directory for
helpers with transient state. "

re: performance
https://stackoverflow.com/questions/21721028/how-to-improve-clojurescript-performance
"Now, if performance is really critical to what you're doing and persistence provides
no benefit, you can just use arrays and objects from ClojureScript:"
"By using records and native field access, you can cut the runtime for your
original ClojureScript solution in half"

http://numergent.com/2015-12/ClojureScript-performance-revisited.html
******
"As we can see it’s doing this with a regular vector, which we can easily turn into a
transient one and persist it once we’re done."
bought him 1 fps, 12->13
lists other, more impactful techniques
mentions `keep` as a one-pass map+filter

http://davedellacosta.com/cljs-protocols notes on protocols

http://www.bestinclass.dk/blog/brians-brain-optimized-clojurescript-html5

https://swannodette.github.io/2013/06/10/porting-notchs-minecraft-demo-to-clojurescript/ nolen on perf

okok that's enough reading for now
tomorrow i should be able to start actually coding something
and constantly be terrified that i'm violating all the principles i've read about or some shit

TODO look into a good canvas js library that i can use via cljsjs

https://web.archive.org/web/20140509212857/http://resatori.com/clojure-entity-component-system

unrelated: http://yogthos.net/posts/2016-02-22-LuminusEmbracingHugSQL.html - yesql no longer developed?

http://elbenshira.com/blog/the-end-of-dynamic-languages/
http://yogthos.net/posts/2015-11-28-TheSkyIsNotFalling.html
dunno about this argument

http://retroaktive.me/blog/keechma-design-decisions/

https://github.com/tonsky/datascript - relevant for storing entities?

======

2/24/16

ibdknox uses a js stats library in https://github.com/ibdknox/ChromaShift/blob/master/js/lib/stats.js
see https://github.com/ibdknox/ChromaShift/blob/master/cljs/game/lib/dev.cljs

he uses ! and ? as aliases for aset and aget, not sure if i like it but here we go
https://github.com/ibdknox/ChromaShift/blob/master/cljs/game/lib/core.cljs

physics in https://github.com/ibdknox/ChromaShift/blob/master/cljs/game/lib/physics.cljs
note the Box2D library he seems to be using

ok you know what i think my entities are just going to look like

{:id 1234
 :type :player
 :position a-position-component
 :bounding-box a-bounding-box-component
 :etc etc}

rather than

{:id 1234
 :components [a-position-component a-bounding-box-component etc}

i think that the second style makes a lot of sense if you're outside of clojure and are used to OOP and
trying to force yourself out of it, but i don't think it's required here. i also think that the second
style is particularly good about discouraging components from communicating with one another, and also
that it probably makes a lot of sense in eg an MMO where you have a jillion entities and a jillion components
and you want to store their relationships in a RDBMS. but that's not us here. so i think i'll just use dicts.

http://box2d-js.sourceforge.net/ here's that box2d library
more relevant if you want gravity, etc; let's skip it imo

still having a lot of trouble figuring out what position components should look like
are they just an :x and a :y, or do they also have a :width and a :height?
i know that ideally :width and :height would be for bounding boxes, but like what *doesn't* have a shape like that?
i think in this game i'm going to have everything be rectangular, so nothing
so you have a :position with an :x and a :y and a :width and a :height
and you can also optionally have a CollisionBox with a :width and a :height
things that don't have collision boxes: scenery, basically nothing else
end of level has a collision box so you know when the player's walked into it
items/pickups have collision boxes for same reason
so i guess collision boxes have some sort of like :obstruction true/false field

seriously do look into that stats.js thing, it looks legit
https://github.com/mrdoob/stats.js/
note the bookmarklet!!!!

ok cool this bookmarklet works:
javascript:(function(){var script=document.createElement('script');script.onload=function(){var stats=new Stats();stats.domElement.style.cssText='position:fixed;left:0;top:0;z-index:10000';document.body.appendChild(stats.domElement);requestAnimationFrame(function loop(){stats.update();requestAnimationFrame(loop)}); document.getElementById("ms").style.display="block"; document.getElementById("mb").style.display="block";};script.src='http://rawgit.com/mrdoob/stats.js/master/build/stats.min.js';document.head.appendChild(script);})()

lots of notes from my walk, going to try to get them all down before i forget them
you have a few systems that run every tick
movesystem, firesystem
they read from intended-move-direction and intended-fire-direction
which for human-controlled entities is written to directly by the keyboard (via an interface)
and for AI entities is recalculated every tick [so there's another one that's run every tick]

but most of your systems just listen to events
collisionsystem listens for intended-move messages
damage system listens for contact messages
xp system listens for kill messages
etc

and so you have this like event graph / dependency graph between the systems
and so you have a few that are running every tick, and most of them always running and just listening
for events constantly
and the rendering system runs every tick too


unrelated
status effects:
poison
freeze
knockback
slow
stun (same as freeze?)

okok so we're almost ready to get started but first i want to make sure my ideas about events + ECS
aren't completely insane, so i have a bunch of google tabs open about that

https://github.com/MovingBlocks/Terasology/wiki/Entity-System-Architecture talks about events
cool-looking project btw, voxel world thingy

"ComponentSystems, or Systems for short, provide behavior to entities. They do this in two ways
Processing entities with a desired set of components in response to engine method calls like
initialise(), update(float delta) and render()
Responding to entity events sent to entities with a desired set of components"

yeah, that sounds kinda like what i have in mind, cool

"The health system would respond to an entity with a Health component receiving a Damage event,
in order to reduce an entity's health - and if the health reaches 0, send a Death event to the entity"

in this design of theirs, *entities* receive events rather than systems receiving events. not sure if
i agree with this, prob won't do that

https://github.com/MovingBlocks/Terasology/wiki/Entity-System-Architecture#events-and-event-handlers good shit

" Systems can then provide event handlers to pick up specific events that have been sent entities
with a desired set of components. Expanding on the Damage event, you may have a System that handles
damage events that occur on entities with health components, in order to reduce health. Or a System
that handles damage events for entities with a location and physics component, to knock the entity
away from the damage causer."

i'm still not convinced that sending messages to entities is correct

"Events also support cancellation - this allows a system to stop an event before it
eaches systems with a lower priority - for instance if you add an invincibility component
to make an entity temporarily immune to damage, you can add a system that will intercept
the Damage event and cancel it before it can reach the health system."

hrm hrm hrm

https://www.gamedev.net/topic/643311-events-and-entity-component-systems/
good first post, bad responses

https://gamedev.stackexchange.com/questions/47476/tips-for-component-based-entity-system-message-handling
"Although I haven't implemented a way to handle events (other than entity-related events),
I left that up to the user" lol

https://gamedev.stackexchange.com/questions/83767/communication-pattern-in-entity-component-system
"There is no right answer to your question and a lot of it comes from personal taste and out of need."
fair nuff

http://unity-coding.slashgames.org/component-based-entity-systems-event-driven-systems-to-implement-the-logic/
"As a system is very self-contained, events are the way to communicate with other systems and the world
outside a system in general."
yes yes fine ok

http://forums.xkcd.com/viewtopic.php?f=11&t=81459
"the major strength of component systems: you minimise communication overheads and you can easily "batch" updates."

http://tarheadstudio.com/entity-component-system/
"Have you considered an event system of some sort on top of this?"
"Yes. The way we have solved it is rudimentary though: systems send messages, which is an object with
some data, to a game manager, who propagate the message to every other system."

ok so at this point i'm convinced that my design is good

******
so we're going to go with the style of entities/components that i talked about at the start of today's notes
and there will be a bunch of systems that exist
and some systems will run on every tick
and other systems will just listen for events
and there are some examples of those two kinds of systems in today's notes above
rad

https://github.com/tonsky/41-socks/blob/gh-pages/src/forty_one_socks.cljs

http://www.compoundtheory.com/ prettiest blog ever
http://www.compoundtheory.com/brute-entity-component-system-library-0-2-0-the-sequel/
started side-effecty, went functional
ok so anywyay i'm not going to use brute

http://www.compoundtheory.com/writing-a-game-feels-like-im-going-around-in-circles/
TODO free sprites at http://www.widgetworx.com/spritelib/
apparently http://www.physicsclassroom.com/ is good for physics

http://www.compoundtheory.com/mini-game-dev-diary-1/ cool stuff

http://www.pixijs.com/ claims to be super fast

ok so i need to pick a rendering library
first contenders i found are phaser, fabric, and pixi
phaser appears to sit on top of pixi (but not any more i guess) and to be a full-fledged engine
i think that is *not* what i want, and that i want pixi or fabric instead
i just want a renderer, i don't want someone else's game engine

https://github.com/alexkehayias/chocolatier (seen above) uses pixi, read through its source if i go with pixi

http://sam-koblenski.blogspot.com/2015/08/a-barely-adequate-guide-to-javascript.html some guy who goes with pixi

"Anyway, I tried a few different options when I was building the tool, Fabric.js, Famo.us,
but nothing had close to the performance of PIXI."
hrm
pixi does have more stars/etc
i guess i'll prob go with it

https://groups.google.com/forum/#!topic/flashcodersny/rU0-3zD7QIo this guy says pixi over fabric

stumbled over http://squirrel.pl/blog/2013/03/28/two-ways-to-access-properties-in-clojurescript/ yet again
**** use only aset/aget when interacting with javascript libraries

ok so i'll go with pixi for now and if it feels too heavyweight i'll switch to fabric

http://www.mase.io/code/clojure/2015/02/07/pixi-cljs/
https://github.com/maseb/lab-pixi-cljs/blob/master/src/pixicljs/core.cljs
https://github.com/maseb/lab-pixi-cljs/blob/master/src/pixi/core.cljs

TODO next task is going to be to spend some time with pixi, make a pixi.cljs that wraps it

TODO i think the rendering system is going to have to subscribe to movement events
like, successful-move events, ones emitted by the collision system
whenever a successful move happens, the relevant entity's pixi object needs to be mutated to reflect the
new position

collisions:
https://gamedev.stackexchange.com/questions/33731/collision-detection-and-response-in-an-entity-system

*****
ok so the goal for tomorrow is to work on the `pixi` branch
learn a lot about pixi by reading and playing around with it
begin work on a wrapper library for it
and begin work on a pubsub event system so that the render system can subscribe to move events

ignore the concept of collisions for now, forget they exist

=========

2/25/16

here are my goals for today

design and build a simple event system
codify schemas for systems
  they can have an :every-tick field whose value is a map like
    {:reads #{:render-info :position}
     :fn (fn [entity] entity) ; TODO should this take a single entity or a list of entities? prob the latter for perf?
     }
  they can also have an :event-handlers field whose value is a list of maps like
    {:handles an-event-type
    :fn (fn [event] something) ; TODO should this also take a system? what values should it return? does it just perform side effects?
    }

...and ideally i'd like to start wiring the rendering system up so that it listens to events
that are emitted by the movement system (because pixi.js relies on mutability, so we'll
like have all of these objects in flight that represent each entity, and so when each
entity moves we have to mutate its corresponding object's x and y, etc),
but i doubt that i'll get to that today.

let's just mainly focus on designing an event system (likely using core.async) and codifying
the schema for System.

pixi links to look at later, haven't processed these yet:
http://sam-koblenski.blogspot.com/2015/08/a-barely-adequate-guide-to-javascript.html
http://www.mase.io/code/clojure/2015/02/07/pixi-cljs/
https://github.com/alexkehayias/chocolatier/blob/5bc509f32f12411848c995f1e11ef917e87d6cbb/src/cljs/chocolatier/engine/components/renderable.cljs
https://github.com/alexkehayias/chocolatier/search?utf8=%E2%9C%93&q=pixi
https://github.com/alexkehayias/chocolatier/blob/dev/src/cljs/chocolatier/engine/systems/render.cljs
https://github.com/alexkehayias/chocolatier
https://github.com/pixijs/pixi.js
https://pixijs.github.io/docs/
http://www.goodboydigital.com/pixi-js-tutorial-getting-started/
https://github.com/maseb/lab-pixi-cljs/blob/master/src/pixicljs/core.cljs
https://github.com/maseb/lab-pixi-cljs/blob/master/src/pixi/core.cljs

ok
so what should our event system look like?

core.async pubsub info
https://github.com/clojure/core.async/wiki/Pub-Sub
...hrm

https://yobriefca.se/blog/2014/06/04/publish-and-subscribe-with-core-dot-asyncs-pub-and-sub/

"While the pub/sub mechanism provided by core.async is higher level than working directly
with chans and mults to achieve the same thing (in fact that is how the pub/sub operations
are implemented internally) it should still be considered a set of lower level primitives
compared to say a specific event bus notification with topic namespacing, wildcard broadcasting
and other such specialised features."

"I found the idea a bit easier to understand when I thought of the publication as a
realised topic or set of topics."

re: docstrings, here's the "would this work with multiple arities?" post i've been remembering lately
https://www.reddit.com/r/Clojure/comments/3nko85/having_trouble_with_pubsub_with_coreasync_channels/

https://clojure.github.io/core.async/#clojure.core.async/pub

https://github.com/search?utf8=%E2%9C%93&q=core.async+pub+extension%3Aclj+extension%3Acljs&type=Code&ref=advsearch&l=&l=

ok it looks like i'm *kinda* on my own here re: prior art
here goes

ok i split things up a bit and made an events ns
next up: have move-system send a dummy event to render-system

ok, that worked pretty well. now let's get move-system only send the event when an entity has actually moved

ok wow i went into a fugue for a bit and all the code is all fucked up now but i think systems are now maps
and that their tick function gets called with a list of only the relevant entities
TODO that sure sounds worth writing tests for

anyway tomorrow i should look at all this code with fresh eyes and look for things that seem insane
and refactor them and simplify them
but right now the box is moving around like it's supposed to and i have no idea what i did and i'm going to
eat something soon, so i'm going to take a break

also TODO afterward (ONCE ALL THE CODE DOESN'T LOOK INSANE ANY MORE): actually automatically wire up event handlers

also eventually i should make the character tinier like in RoR, i like that style, too big atm

=======

2/26/16

ok so here's where i'm at
it is not super clear how systems should talk to each other
google has no obvious single best accepted solution

my favorites so far:
* ephemeral, "pending-foo" components - so when the collision system detects that two things have collided
  (and either kills the projectile or cancels the pending movement event), it adds a "pendingdamage" component
  to the relevant entities, and the damage system looks for those and handles them and removes them when they've
  been processed
  * pros:
    * easy to remain purely functional in this world ++
    * every system runs once per tick, they communicate with one another via ephemeral components that are
      processed / removed each tick, everything's just a function, everything's synchronous and relatively easy
      to reason about
  * cons:
    * extremely tight coupling. collision system has to know that damage system exists and emit a "pendingdamage"
      component. that seems super dumb. or it emits a "pendingcontact" component, but if several different systems
      read from those, only *one* of them can be responsible for removing them when they've been handled,
      and so all of a sudden like ordering of functions in the tick matters and everything is super tightly
      coupled together and life is awful

so probably not that one. the other alternative i have so far is

* event system - so when the collision system's sole responsibility is to _listen for_ entities that are
  attempting to move, and then either apply the movement or reject it and notify the rest of the world
  that a contact event happened, and the rest of the world can like render differently / play a noise / apply
  damage / whatever
  * pros:
    * loose coupling holy grail basically
  cons:
    * when, say, the damage component's :contact event handler gets run and it decides that entity 4 should
      have its :health decremented by 25 or whatever, it is not immediately clear *how* that change should take
      place. all the event handler has is an event - it doesn't (shouldn't!) have access to the game-state atom,
      because that'd be global mutable state.
    * everything is asynchronous now, and so i worry that this will open me up to more difficult-to-reason-about
      performance problems / general bugs

so my current plan is to go with the event-based system, and just deal with the fact that i'll have some
sort of global-ish mutable-ish state [i'll have it hidden behind an interface of functions, like
(update-entity! entity-id update-in [:foo] bar baz) or whatever].

and so the way that event handlers will update the game is by sending an event like

{:event-type :update-entity
 :entity-id 1234
 :fn (fn [entity] updated-entity)}

and there'll be a single go-block consumer whose job it is to handle these events (maybe just :update-entity,
but maybe other events like :pause-game or whatever too, not sure yet we'll get there later) and update the state
of the world to reflect decisions that have been made in systems' event handlers. and so event handlers
will take args [the-event publish-chan], and that's how they'll be able to emit messages like this.

i think this system will work. i'll need to do some thinking/designing in order to come up with a good
API for changing the state of the world, and will want to come up with a way of hiding the actual mutable
`state` atom from the rest of the program (likely via a closure of some sort), but i think i can make this work.
i don't think the ephemeral-component approach is a good one, i think this event one will work though.

cool so i did a tiny amount of refactoring and now i think i'm ready to dive into pixi
opened all those tabs from above back up again

http://www.goodboydigital.com/pixi-js-tutorial-getting-started/ "launch last month" april 2013 (?!)
"Stage represents the root of our display tree."
" A renderer draws a stage and all its contents to the screen"

ok i'm almost out of battery and need to take a break
but the next thing i need to work on is getting super familiar with pixi and like adding
something to the stage and moving it around and drawing it

i'll need to read through all these goddang tabs to get super familiar with how pixi works
and eventually i'll want to make a pretty api that sits on top of it

ok, so what's the specific problem i'm having with rendering engine reloadability?
i guess i mainly don't want my renderer and stage js objects to be blown away when the rendering ns is reloaded
what other state will we have?
likely a map from entity-id -> sprite (or some such object)
everything else can be blown away

so i guess we have two options
we put a :rendering-engine k/v pair on the GameState map
or we have a private rendering-engine atom that's kept inside the rendering system's ns

the latter seems like the less testable approach to me, which is often a smell
but i'm also not in love with having a :rendering-engine k/v pair on GameState, because that makes this
mutable data essentially global

yeah i think having a private rendering-engine atom in the rendering system's NS is fine
if we want to we can always with-redefs it in tests

ok, gotta learn more about pixi's API
does everything need to be a Sprite?
what's a Graphics?

http://sam-koblenski.blogspot.com/2015/08/a-barely-adequate-guide-to-javascript.html

objects appear to have a .clear() function

ok christ finally
******** https://github.com/kittykatattack/learningPixi appears to be the way to learn pixi
"I know for a fact that it's the best book, because I wrote it!" ugh
"If you aren't running a webserver, Pixi won't work" concerning
lots of bullshit about how you need to "install" pixi, urgh, false/misleading

apparently http://www.goodboydigital.com/pixi-js-v2-fastest-2d-webgl-renderer/ explains the "resolution"
option you can pass when creating a renderer

https://github.com/kittykatattack/learningPixi#pixi-sprites for when i eventually want to add sprites/images
how to render boxes, though?
do i need a Graphics for that?

https://github.com/bhauman/flappy-bird-demo/blob/master/src/flappy_bird_demo/core.cljs
is a good example for how to make your animationframe function take+handle timestamp delta

https://github.com/kittykatattack/learningPixi#positioning-sprites positioning

https://github.com/kittykatattack/learningPixi#velocity can set sprite velocity rather than x and y

*****
https://github.com/kittykatattack/learningPixi#pixis-graphic-primitives here we go fuckin finally

https://github.com/kittykatattack/learningPixi#the-hittestrectangle-function notes on collision detection

notes from a fellow cljs pixi dev in
https://github.com/alexkehayias/chocolatier/blob/dev/todo.org#optimizations-2014-11-29-sat
**** lots of perf notes/goals there ************
note the "This did not end up working" bit re: .- props

"Make the input system emit an event
Currently it updates it’s component state but that’s it. SHould send an event to avoid
other components querying it directly "

super interesting notes here

https://github.com/alexkehayias/chocolatier/blob/5bc509f32f12411848c995f1e11ef917e87d6cbb/src/cljs/chocolatier/engine/ecs.cljs#L133

"The component function can return 1 result or 2. If 1 result then the
    output is treated as the component state. If it is 2 then the second
    argument is events that should be emitted. If format-fn is specified
    then you can implement whatever handling of results you want."

hrm not in love with all that

a note from his event system:
;; Avoid sending messages based recieving a message to prevent
;; circular messages happening

********
https://github.com/alexkehayias/chocolatier/blob/5bc509f32f12411848c995f1e11ef917e87d6cbb/src/cljs/chocolatier/engine/pixi.cljs
his interface around pixi

https://github.com/alexkehayias/chocolatier/blob/dev/src/cljs/chocolatier/engine/systems/render.cljs
his render system

http://www.wagjo.com/benchmark-cljs/ cljs perf - 2+ years out of date though!

"Partial is very slow. Also do note that creating anonymous function costs something.
Try not to create anonymous functions inside performance sensitive loops, as they are recreated
in each iteration."
*** good to know, need to keep an eye on this if(when!) perf becomes an issue

"Assoc in map or record is slow. Much faster is to have a custom type and copy it on every assoc.
 Update in map or record is slow. Much faster is to have a custom type and copy it on every update."
hrm. hrm hrm hrm.

http://www.yeahbutisitflash.com/?p=5666 talks about viewports
iii think we can sort of ignore it for now. come back to it when we implement the camera system
(which will follow the player i guess, i haven't thought about this at all yet)

http://www.yeahbutisitflash.com/?p=6496 sort of talks about level generation
ok it talks about performance too
GPUs and stuff, sprite sheets

talks about object pooling, which i'd like to avoid since we're in cljs but it's good to keep in mind for perf
if it becomes necessary

interesting re: "borrow"/"return" terminology
that's actually an interesting idea/technique

https://en.wikipedia.org/wiki/Object_pool_pattern
"When it is necessary to work with a large number of objects that are particularly **expensive to instantiate**
and each object is only needed for a short period of time, the performance of an entire application may be
adversely affected. An object pool design pattern may be deemed desirable in cases such as these."
none of our stuff is that expensive to instantiate
"Some publications do not recommend using object pooling with certain languages, such as Java,
especially for objects that only use memory and hold no external resources."

http://www.yeahbutisitflash.com/?p=7046 talks about maps
these articles are actually really surprisingly well put together
gj, this person

ok, that's probably enough for now.
next up:
do a pass on voke.core, split out user input logic
figure out how to communicate to the game that the player has pressed or unpressed a movement key

after that.. dunno! read about collision detection algorithms, add walls?

======

2/27/16

so is input.cljs a *system*? or is it just a file?
what characterizes a system? it's either something that runs every tick, or something that listens to and
optionally publishes messages that affect the state of the game, or both.

the input system won't run every tick, but it *will* publish messages that affect the state of the game,
so let's go ahead and make it a system.

ah - but the events it *listens* to *aren't* game events!
so i don't think it's a System after all.

it's a ns that is given access to voke.system.core's `publish-chan`

ok cool input is moved out of voke.core and totally works afaict
and we have a system set up that supports :update-entity events

i had one interesting bug where my events were looking like :type :update-entity instead of
:event-type :update-entity, and so my events were being dropped on the ground and i couldn't figure out why.
was irritating to debug; i know to look for it now, but still.
i can't easily find a way to subscribe to *all* topics on a publication, which would aid debugging. asking in slack.

actually nvm, listening for `nil` as described in https://yobriefca.se/blog/2014/06/04/publish-and-subscribe-with-core-dot-asyncs-pub-and-sub/
would have helped debug this, so i'll try that next time.

ok, time to read about collision systems

https://www.toptal.com/game/video-game-physics-part-i-an-introduction-to-rigid-body-dynamics
"A rigid body naturally rotates around its center of mass, and the position of a rigid body is
considered to be the position of its center of mass."

boy there is a lot of physics in this article

********************
http://www.toptal.com/game/video-game-physics-part-ii-collision-detection-for-solid-objects
"In the context of rigid body simulations, a collision happens when the shapes of two rigid bodies are
intersecting, or when the distance between these shapes falls below a small tolerance."
"If we have n bodies in our simulation, the computational complexity of detecting collisions with
pairwise tests is O(n2), a number that makes computer scientists cringe."
"In order to optimize the collision detection process, we generally split it in two phases:
broad phase and narrow phase."

all this stuff here is about 3d simulations i think
for the broad phase he talks about "space partitioning"

"There are plenty of space partitioning algorithms and data structures that can be used for this,
such as uniform grids, quadtrees in 2D, octrees in 3D, and spatial hashing."

great summary on sort and sweep here, looks like a really interesting+simple heuristic/approach

mentions that box2d implements all this stuff, so maybe i'll end up using that library after all

"concave shapes are harder to work with" - why, though?

"In a convex shape, a line segment between any two points within the shape always falls completelyx
 inside the shape. However for a concave (or “non-convex”) shape, the same is not true for all possible
 line segments connecting points in the shape. If you can find at least one line segment that falls
 outside of the shape at all, then the shape is concave." oh that makes sense

convex hull, convex decomposition
support functions

i'm really impressed by this article

https://gamedev.stackexchange.com/questions/26501/how-does-a-collision-engine-work
" In discrete methods, objects will end up penetrating each other, and the physics
engine then works to push them apart"
talks about "sleeping" objects, and a "contact cache"

***************
http://games.greggman.com/game/programming_m_c__kids/ (from 1993 [!!!!])
"In M.C. Kids the Hamburglar has stolen Ronald’s magic bag and you, as Mick or Mack, must find
the magic bag before Hamburglar does something we’ll all regret."

"Every object can only collide with one other object per frame, so every object is assigned a
collision priority so that it will collide with the most important object. It is more important
to know that the kid hit a monster than to know that the kid hit a PickupBlock."

********
"All objects have a collision matrix, so that they can only collide with certain other objects.
The kid collides with everything. A PickupBlock only collides with the kid and monsters.
Some monsters collide with the kid, other monsters, and various project tiles. Certain other
monsters don’t collide with other monsters. Not having to check every possible collision saves tons of time."

"Collisions: Now for the fun part. NOT!" hee

"Many of the reasons for these contortions have to do with speed. Most video game systems must
run at 60 frames a second, and if you have to look up 4 or 5 tile positions per collision pixel
per frame you are going to run out of time. All this is something you should consider when
designing a platform game. It is much easier the create a platform game with no slopes, so if
you are short on time, then design your game so that it doesn’t need slopes."

http://games.greggman.com/game/tweening/ tweening/lerping

*****
http://www.hobbygamedev.com/adv/2d-platformer-advanced-collision-detection/
"Once again, as with the tile-based example, we’ll be relying on the age-old trick of waiting until
after overlap occurs in logic, then correcting for the overlap before it has a chance to render incorrectly.
That will be “collision”. (I.e. no predictive/extrapolation calculations!)"

i'm glad this guy says that's legit, because that was my exact plan

**********
"Mathematically and computationally, it’s simple to tell whether two rectangles are overlapping:
two axis-aligned rectangles don’t overlap if and only if the left of either is right of the other’s
right or the top of either is below of the other’s bottom."

well, that's for *axis-aligned* rectangles... which, maybe all of the things in voke will be?
will bullets really be ellipses or will they have rectangular bounding boxes?
probably the latter, right? no reason to do the former IMO
but i've considered like diamond-shaped bullets, and those won't be axis-aligned
so maybe this approach won't work for me. good to know about though, makes sense
although i guess the point re: axis-aligned rectangular bounding boxes is that you could *construct* one
around a diamond relatively easily (how ?), and then use *it* to test for collisions.

quad trees are good

"the simplest way to avoid tunneling – and the method used by most 2D platformers,
including Everyone’s Platformer – is to just enforce safe upper bounds on speed and design
with safe lower bounds on sizes"

makes sense

***** favorite explanation/diagram for bounding box collision
http://devmag.org.za/2009/04/13/basic-collision-detection-in-2d-part-1/

http://gamedevelopment.tutsplus.com/tutorials/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space--gamedev-374
more detail on quadtrees/implementation

https://katyscode.wordpress.com/2013/01/18/2d-platform-games-collision-detection-for-dummies/

the "mask approach" described here is very similar to what i'd had in mind when i was thinking about how i'd
implement collision detection from scratch

basically the main thread through all of these articles is that, yes, detecting everything one pair at a time
is n^2, and so you want to do less work than that. quadtrees and aabbs are a good way of doing a broad pass
at collision detection. see the sort-and-sweep algorithm described in an article above.

so anyway in this game i'll only be doing the broad stuff because i don't care about like actual super fine
grained detection of like whether or not a circle *really just barely* missed a rectangle

https://developer.mozilla.org/en-US/docs/Games/Techniques/2D_collision_detection

https://www.quora.com/How-can-I-self-study-Linear-Algebra tips on linear algebra
i.... don't understand this advice

http://betterexplained.com/articles/linear-algebra-guide/
ok sure let's spend a while working through this
eventually i'll look up js collision detection libraries
but i don't know anything about matrices/vectors and this seems like as good a time as any
to sit down and learn some about 'em

"In math terms, an operation F is linear if scaling inputs scales the output, and adding inputs adds the outputs"
"Our only hope is to multiply by a constant"
"However, we can still combine linear operations to make a new linear operation"
"And how could we run the same input through several operations? Have a row for each operation"

=====

2/28/16

taking a break, reading through various unrelated things for fun

https://www.toptal.com/aws/service-oriented-architecture-aws-lambda

TODO: i have no idea how makefiles work, should learn about how to write/use 'em one of these days

https://facebook.github.io/immutable-js/ neat
"the case for immutability" section a bit incoherent

http://tech.noredink.com/post/107617838018/switching-from-immutablejs-to-seamless-immutable

god, lots of reading today. forgot to paste a lot of the links i was looking at.

https://scott.mn/2014/01/20/reference_types_separate_identities_and_values/
atoms for beginners / nonclojurists

http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome

https://www.youtube.com/watch?v=MDZpSIngwm4
"single atom app state is good"

http://www.gamasutra.com/view/feature/3429/crashing_into_the_new_year_.php

******** GOOD ARTICLE ON COLLISION DETECTION
http://www.gamasutra.com/view/feature/3426/when_two_hearts_collide_.php
"The bounding box of the two objects clearly are colliding. It’s also just as clear that the objects
themselves are not. This is why being a human is great and being a game programmer is difficult."
"the game developer’s philosophy: "Do as much work up front as possible, especially if it saves run time.""

******** NOTE
"We assume that collision has not occurred and update the object’s position. If we find that a collision
has occurred, we move the object back and do not allow it to pass the boundary (or destroy it or take
some other preventative measure). However, this assumption is too simplistic because we don’t know if
the object’s previous position is still available. You’ll have to devise a scheme for what to do in this
case (otherwise, you’ll probably experience a crash or you’ll be stuck)"

on tunneling:
"An easy approach is to create a convex hull around an object’s location at two different times.
This approach is very inefficient and will definitely slow down your game. Instead of constructing
a convex hull, we could construct a bounding box around the solid."

"we can divide our world into objects that are stationary (collidees) and objects that move (colliders)
even with a v=0. For example, a rigid wall in a room is a collidee and a tennis ball thrown at the wall
is a collider. We can build two spatial trees (one for each group) out of these objects, and then check
which objects really have a chance of colliding. We can even restrict our environment further so that
some colliders won’t collide with each other — we don’t have to compute collisions between two bullets,
for example."

"In practice, these methods have manifested as octrees and axis-aligned bounding boxes (AABBs)"
"There are several ways to precompute OBBs, and they all involve a lot of math"

anyway current status is that i'm planning on just using dumb AABBs for collision detection
(if i even implement it myself! i'm mainly learning about all this stuff for fun, but expect to actually
end up just using some js library for this)

ok back to http://betterexplained.com/articles/linear-algebra-guide/
learning about matrices
[Operation Matrix] [Input Matrix]
[operation count x operation size] [input size x input count]
[m x n] [p x q] = [m x q]
[2 x 3] [3 x 2] = [2 x 2]
"Notice the matrices touch at the “size of operation” and “size of input” (n = p). They should match!
If our inputs have 3 components, our operations should expect 3 items. In fact, we can only multiply
matrices when n = p."

hm anyway i understand matrices *slightly* more but wouldn't say i have a firm handle on linear algebra.
would be worth doing the khan academy unit on it sometime
ok, anyway that's enough of that, let's go look for js collision detection libraries

hm i might have to implement something myself
something simple using SAT / AABBs

https://github.com/jriecken/sat-js relatively unused but perhaps a good learning aid

https://github.com/wellcaffeinated/PhysicsJS (unmaintained)

https://github.com/liabru/matter-js

https://github.com/liabru/matter-js/blob/master/src/collision/Detector.js super well commented

overall approach appears to be this series of passes:
1. quadtree or some other space partitioning method (broad test)
2. bounding-box tests (mid)
3. SAT test (narrow)

https://github.com/liabru/matter-js/blob/master/src/collision/SAT.js sat implementation

https://github.com/liabru/matter-js/blob/master/src/geometry/Bounds.js AABBs

https://github.com/kripken/box2d.js/ if i really want it (i don't)

actually you know what the blurb on https://www.ibm.com/developerworks/library/wa-build2dphysicsengine/
looks pretty good

"Sometimes, the complexity and overhead of a third-party physics library, such as Box2D, is overkill
for your JavaScript game"

that sure sounds like it's the case for me

here are the things i expect to build

collision detection
velocity/acceleration

here are the things i do *not* plan on including in the game

gravity
elastic collisions (eg bouncing off of things realistically) - you'll just come to a stop, not bounce off
  TODO: how will you come to a stop? immediately set velocity to 0 when you collide with a monster/wall?
    feels like there must be lots of edge cases there - what if monster runs straight at you? are you stuck to it?

all of the shapes in this game will be concave
there'll be rectangles, diamonds (obviously just rotated rectangles), spheres, ellipses
and that's it

ok i'll start on this tomorrow. will start by just doing something like

whenever an entity attempts to move:
for each other entity in the game that has a collision component: <----- TODO OPTIMIZE LATER VIA QUADTREES
compare AABBs to see if a collision happened
TODO eventually implement SAT for wavy obstacles / angled rectangles / etc

if moved entity collided with something, cancel its movement and fire a :contact message
if it didn't collide with anything, apply the movement (how? :update-event message?) and fire a :movement message

========

2/29/16

https://github.com/asciinema/asciinema-player uses phantom+doo, worth looking at when it comes time for tests

https://github.com/asciinema/asciinema-player/blob/master/src/cljs/asciinema_player/core.cljs#L31
good example of taking a ton of kwargs+defaults

he has two primary player implementations, "recorded" and "stream", and throughout core.cljs he has various
multimethods that have different implementations based on whether the player map they're operating on
is :recorded or :stream, interesting. this is basically how i'd expect people to use multimethods, but i haven't
seen them used often in the wild, people usually seem to favor protocols+records instead and i've
never been all that sure why (best guess: performance, better encapsulation?).

https://github.com/asciinema/asciinema-player/blob/master/src/cljs/asciinema_player/util.cljs#L6
is interesting, never seen/used js->clj before

tried it out, works like this:
(js->clj #js {:foo :bar} :keywordize-keys true)
{:foo :bar}

hella terminal command codes and shit in
https://github.com/asciinema/asciinema-player/blob/master/src/cljs/asciinema_player/vt.cljs

in https://github.com/asciinema/asciinema-player/commit/ab5aad1edde90f4a86e3ada80f8866e0b42d21d7
he solves a memory leak / cpu problem having to do with core.async
i have no idea how i'd go about doing that - the cpu i could diagnose via the profile tool, but memory?

http://ku1ik.com/2015/10/12/sweet-core-async.html

ok, i'm running into some issues when implementing the collision system

so basically, right now the plan was to have the movement system fire :intended-movement events whenever
a human- or ai-controlled entity wants to move somewhere, and the collision system listens for those events
and applies the new movement if the spot's clear, or rejects it and fires a :contact event if the spot's not clear.

and so in order for this to work, the collision systems needs to have access to the list of entities in the game
i suppose you could have the system keep a shadow list that basically mimics the master game state's list,
but that seems retarded.

and so the thing is that right now, there isn't a way for event handlers to get access to the state of the game.
they just get the event and a publish-chan.
well, can we pass it along in the event? i wonder

ok yeah i guess we really could

so here's what has to happen

the movement system's :reads field will be empty to indicate that it operates on the entire set of entities

the movement system then filters down so that it only operates on dudes with :intended-directions or whatever

and on each of those, it fires an :intended-movement event with fields :moved-entity, :all-entities

ok, that worked, collision detection is in.
so what next?

1) currently, the way collision detection works, you can't ever touch a wall - you can just get close to it,
    and then try to move closer to it and get denied, and so there's always a few pixels' gap.
    i suppose acceleration/deceleration would fix this, so on second thought let's just wait for that to go in.
2) if you touch a wall on your right, and try to move up+right, you stay still, you don't move up.

2) seems worth working on. what's the best way of fixing it?

we could emit N intended-movement events for player-controlled entities, one per held-down movement button.
that doesn't seem so bad, because only 1 entity would emit that many intended movement events, and you're
talking about a maximum of like 4.

maybe this should wait until after acceleration goes in, though, come to think of it, because that'll likely
change the whole movement situation pretty drastically.

ok so i guess there are two main next interesting things to work on

1) acceleration/velocities/etc
2) firing bullets

the second is obviously more immediately fun, so i'll probably start with that.

right first though i want to make x/y positions be the center of the shape

what needs to be modified for that to happen?

rendering system
collision system
level initialization

movement/input don't care though

ok cool that was straightforward enough

so, bullets.

what's the system called? bullet? projectile? attack?

sidenote: garrick recommends http://www.metanetsoftware.com/technique/tutorialA.html re collision detection
not gonna read it yet, thinking about bullets first

kiger recommends http://www-cs-students.stanford.edu/~amitp/gameprog.html , same deal

ok so right

yeah, attack system, why not; it's clear enough from the name that it's distinct from the damage system

sidenote: what sets AI-controlled entities' intended move directions / fire directions?
system.ai?

ok anyway nvm i started work on projectiles and then realized that none of it will make any sense
until i've implemented proper velocity/acceleration vector-based movement
so we gotta do that first

i'll probably think about it overnight and do it tomorrow

so how would a system like this work?
i've considered adding a new system that's separate from the movement system, but don't see the point
so i guess the movement system's responsibilities expand to look like this:

1) for each entity that *wants* to move somewhere (human-controlled, ai-controlled)
2) update its acceleration to reflect that

then,

1) for each entity with an acceleration,
2) update its velocity to reflect that

then,

1) for each entity that has a velocity,
2) update its position to reflect that

velocity is a vector with a direction in radians and a magnitude in pixels/tick
acceleratio is a vector with a direction in radians and a magnitude in pixels/tick

fwiw,
current set of games i'm mainly thinking about as inspirations
isaac, diablo, risk of rain, teleglitch

=====

3/1/16

http://buildnewgames.com/gamephysics/
makin' a case for vectors
"Vectors are like arrows–they have a length and they have a direction. They do not have
an absolute position in space. The vector [5,3] points north-east, but it doesn’t have a “starting point”."

"If you model points A and B as vectors, then you can get the line segment AB simply by
doing the vector subtraction B-A."

"Using vectors also helps you do intuitive things like adding and subtracting vectors–and keep in
mind that you can model points as vectors, so any math you can do to vectors you can do to points
as well, including rotation around any other point."

garrick's haskell SAT: http://pastebin.com/UG01CB6H

back to the gamephysics article, note his "velocity verlet" integration method

holy shit dude his bouncing+gravity ball example is really short

i... don't really want to do his full 2d example though
spring forces?

"This implementation of the separating axis theorem test is certainly not definitive, however, and you
should craft your own to fit your use-case. This example does not quit early if there’s a test axis with
no overlap; quitting early is a great performance optimization. " **** TODO WHEN SAT HAPPENS

" Also think about the difference between using quadtrees and using a simple fixed grid. Choose whichever
better fits your application; will your objects be evenly distributed throughout the game world, or
will they be clumped together?"

this is a super good point - in isaac a fixed grid would be fine, but i think in voke we'll have bigger maps
with lots of clumping (cleared parts, parts where player is actively fighting monsters / shooting / etc)
and so we'll need quadtrees

http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-1/ looks promising

TODO should my game world be expressed in terms of meters, and only translated to pixels at render time?
seems like a reasonable idea

ok http://blog.wolfire.com/2009/07/linear-algebra-for-game-developers-part-2/ looks pretty good
does a good job of explaining normalization, dot product

http://blog.wolfire.com/2010/07/Linear-algebra-for-game-developers-part-3
"What if instead of rotating each point in the model, we just rotate the model's x and y axes instead?"

"if we are rotating by 49 degrees, then we get the new x-axis by rotating (1,0) by 49 degrees and we
get the y-axis by rotating (0,1) by 49 degrees. Our new x-axis is (0.66, 0.75),
and our new y-axis is (-0.75, 0.66)."

basis vector explanation
"multiplying a 2x2 matrix with a 2D vector is the same thing as changing its basis vectors"

http://www.randygaul.net/2012/02/22/basic-2d-vector-physics-acceleration-orientation-and-friction/
is a bit more what i had in mind i think

https://gamedev.stackexchange.com/questions/14850/how-to-calculate-falling-and-accelerating-velocity

http://www.metanetsoftware.com/technique/tutorialA.html#appendixA gives good definitions of normal, dotproduct

======

3/2/16

still reading through http://www.randygaul.net/2012/02/22/basic-2d-vector-physics-acceleration-orientation-and-friction/

"Once you have this set up, you can easily use this radians orientation value to find a direction vector for your
object. A direction vector is a vector whose length is 1, which allows you as a programmer to multiply it by a
value and easily get a vector in a specific direction of a specific length.
In order to get your normalized direction vector from your angle of orientation, just use:
dirVect.x = cos( radianOrientation );
dirVect.y = sin( radianOrientation );"

yeah this article is way hackier than the other ones listed above but like doesn't require me to spend an extra
week thinking about linear algebra so i might just cheat and go with this approach :/

"Now, what if you need to solve for the angle between two points? This could be useful for homing missiles, or
AI. Knowing the angle between an enemy and the player, for instance, could be used to let the enemy know
which direction to go from there. In order to solve for the angle between two points I used atan2:
angle = atan2( player.y - enemy.y, player.x - enemy.x )
This lets me find the angle between two points, namely between an enemy object and the player. You can then
use this result and compare it with the angle of orientation of the enemy in order to deduce of the enemy
should turn clockwise or counterclockwise, or anything else you'd want!"

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2 js atan

the comments talk about variable vs fixed timestep

ok so what now?
entities can have a Shape, with an x/y and an orientation
orientation is from negative pi to positive pi

they can also have a Motion, with a velocity that's a dx and a dy, and a top speed
you can get the entity's current speed by doing sqrt of dx^2 + dy^2

on each tick,
for each entity with a Motion,
update orientation
  (for player, it's the angle defined by the currently-held-down movement keys)
  (for monsters, it's atan2 or something, it's the angle that directly leads them to the player)
  (for projectiles, it's the angle they were created with)
calculate acceleration
  (if player is moving, acceleration is just like always 0.1 or something, or 10% of top speed or whatever)
  (same with monsters)
find direction vector
  dirVect.x = cos( radianOrientation );
  dirVect.y = sin( radianOrientation );
update velocity, capped at top-speed
  vel.x += acceleration * dirVect.x;
  vel.y += acceleration * dirVect.y;
update position
  pos.x += vel.x
  pos.y += vel.y

so Motion is really just a Velocity? nah it's got a top-speed too, so let's keep calling it Motion
give it an acceleration too

unit circle is from -pi to 0 to pi (is this insane or good?)

ok so if we do that, then down is -pi/2, right is 0, up is pi/2, left is -pi (or pi?)

what if you add each key's sins/coses together? is that retarded

ok i hacked around and acceleration/velocity sort of exists

there are a bunch of things left to do

1) don't keep recalculating 0.9* velocity forever and ever as it approaches 0 infinitely
  just like have it be the case that if your velocity falls below 0.01 or something, your velocity is set to 0
  and if you've got 0 velocity and 0 acceleration, skip velocity-updating calculations
2) update collision system so that if you try to bump into something, your velocity's cut in half or something
3) projectiles shouldn't experience friction

wow it really does feel surprisingly good right now though, and i haven't even tweaked any values yet

ok rough acceleration/velocity are in

still need to tweak values, and really in particular need to figure out a better way of dealing with collisions
with walls. how to calculate the closest non-wall spot to put the entity in?

well, i guess you know that entity 1 collided with entity 2..
but you don't currently know what *side* they collided on

oh wow zeke really wasn't kidding, corners are totally fucked up

so yeah the main next thing i need to work on is walls, then i can do bullets after

ok i think i figured it out but the code i added is, like, voluminous
refactor it tomorrow!!!!!!!!!

=====

3/3/16

ok, spent some time refactoring that code, and fixed a bug dmitriy found that made you move down if
you held left+right (nice).

walls feel good now.

dmitriy reported some aliasing
zeke reported some shuddering [either RAF was falling behind due to his cpu doing other stuff, or events aren't
keeping up to realtime], should keep an eye out for that.

cos/sin/atan2 perf seems fine according to benchmarks, 10k atan2 invocations -> 3ms, and we won't be
doing anywhere near that many.

had some ideas re: projectiles this morning, jotting 'em down:

collision system doesn't know/care about projectiles, just emits :contact events
grim-reaper system listens for :contact events (and eventually :damage ones, but that's a diff story), and
  if both entities are projectiles,
    drops the event on the floor
  if one entity is a projectile, and the other is not its :owner,
    removes the projectile
damage system listens for :contact events and behaves similarly

i'm worried about race conditions for applying damage - what if the grim-reaper system doesn't get around
to deleting the projectile in time, and 2+ damage ticks are emitted for the same projectile?
entities need some way of tracking damage so that damage application is idempotent.

either a :damage-sources field that's a list of EntityIDs, or a :time-last-damaged, or *something*.

anyway for now i guess i can start working on emitting projectiles and having a grim-reaper system reap 'em

damage can come (much) later

ok, today ended up being focused mainly on refactoring; i'll deal with projectiles next time.


ask julio for austin for cljs game stuff

met austin, see http://pettomato.tumblr.com/ , https://twitter.com/AustinTHaas

=====

3/4/16

concepts in http://pettomato.tumblr.com/image/66011458408 i haven't given any thought to:

wall time vs sim time
z-index

=====

3/6/16

need to replace the core.async-based event system with a synchronous one
determinism

====

3/7/16

ok so in my 2/26/16 notes, i talk about how it's not super clear how systems should talk to each other,
and how i ended up deciding to go with an event-based system because that gives you the loosest coupling
possible.

so i implemented one, based on core.async's pub/sub features. but since then i've been really nervous about it,
because the fact that it's built on core.async means that it's asynchronous, and so i'm worried about eg
living in a world where an :intended-movement event fired on frame 5 doesn't end up getting processed
until frame 8, etc etc.

i've been reading through "game programming patterns", which is pretty good, and realized that the solution
to this problem is super simple - if i want an event-based system here, it should be a simple *synchronous* one
that i build myself. it'll have some simple state, just a map like {:event-name [list-of-callback-functions]}.

so when i get around to it, i'll change the event system to be implemented in that way, and i will be able
to sleep way better.

ok, now i'm puzzling about projectiles. how will they work?

they don't have a :brain - they *do* have a shape, a motion, and an owner

they inherit their owner's velocity (dx and dy)
added to that is a single dx or dy number based on :intended-fire-direction

EVENTUALLY there will be a range stat that controls how far projectiles go

entities also have an associated :last-fire-timestamp. does that live on some preexisting component?
can several related components be combined together into one?

ok so entities can have a :weapon, which contains information that controls the creation of projectiles

ok, gonna take a break from implementing projectiles for a bit.

systems that still need to be massively updated to account for projectiles:

* movement
  * don't only move player-based entities
  * don't only move entities with acceleration
  * don't apply friction to projectiles
* collision
  * TODO figure out what should be updated here
* grim-reaper
  * TODO add this system at all

one thing i've been struggling with is the notion of entity "types".

several times now, i've found myself wanting to add a :type key to a component (collision, movement, brain, etc)
to indicate that a particular entity is a :monster, or a :player, or an :obstacle, or a :projectile.

an example: certain entities are projectiles, and thye shouldn't be subject to friction,
and they can't collide with other projectiles

maybe a better way of doing things would be to add an :affected-by-friction s/Bool k/v pair to :motion
and a :doesnt-collide-with #{:foo} k/v pair to :collision

that's a more direct way of expressing what i'm trying to express, i think i like it

ok taking a break for today.

tomorrow:
look into collision system
start grim-reaper system if it seems sane
refactor all this new projectile-related code

later this week:
sit down and really tighten up schema definitions, particularly around events
make events system synchronous

====

3/8/16

transcribing notes taken down on paper this morning, continuing thoughts on "type" fields in component schemas:

be wary of :type fields in component schemas. they're alluring because of course i know that a :projectile
should behave like X and Y, but that's _implicit_. the _explicit_ approach is better. see below:

:collision components should look like

{:type (s/enum :good-guy :bad-guy :projectile :obstacle :trap :projectile :gold :item :explosion)
 (s/optional-key :collides-with) #{CollisionType}
 (s/optional-key :destroyed-on-contact) s/Bool}

type :type field here is just used as a marker - it doesn't have any implicit behavior tied up in it.
the collision system doesn't have code in it that goes "ok if one of these entities is a projectile,
it should behave like thus and so". instead, the other two fields control special behavior.

the :collides-with k/v pair is optional.
if unspecified, it means that the given entity collides with everything.
if specified, it's a set that's a _whitelist_ of the things that the entity will collide with.
only entities that can move should have this field. it feels weird to specify that constraint, but it keeps
the system easier to reason about.

good guys collide with everything except projectiles owned by good guys
bad guys don't collide with gold and projectiles owned by bad guys

if i wanted to implement ghosts, i could just have them not collide with obstacles

for entities like projectiles, items, and gold, there's an optional :destroyed-on-contact k/v pair.
if this is true, when the collision system goes to fire a :contact event involving one of these entities,

the collision system is responsible for removing entities with :destroyed-on-contact true;
the grim reaper system is responsible for removing damaged/killed good/bad guys

when projectiles are created by good guys, they have a :collides-with that's like {:bad-guy :obstacle :item}
when they're created by bad guys, they get {:good-guy :obstacle :item}

projectiles will also have an :owner-id field (not on :collision, just a standalone component)
this is mainly for stuff like lifesteal, etc; collision system doesn't know/care about it

ok, now projectiles don't collide with their owner, and they're removed from the game+screen when they collide
with obstacles.

next up:
* projectiles should be fired in the direction specified by :intended-fire-direction
* projectiles should inherit their owner's dx/dy
* refactor all this

i'm seeing some perf slowdown when 30 projectiles are on the screen at once.
profiling indicates that all of our time is spent in handle-intended-movement.
i'd like to start by replacing the event system with a synchronous one, then seeing how perf goes
if perf is still bad, profile handle-intended-movement

some weird shit happens when a projectile hits a wall, we get a million duplicate :intended-movement events

ok, i think i see what's going on here.

because the event system is currently asynchronous, we're ending up in a situation where system.core removes
an entity, then system.collision/apply-movement assoces a :shape and a :motion onto the now-nil entity,
and so we end up with badly formed entities.

ugh so anyway make it synchronous tomorrow

lol all right i started on that and realized that i have no idea how any of this ever worked

events are synchronous now, but the updates they make are clobbered every frame by the swap! call in voke.core
will need to do some thinking about the best way of architecting this system.

how do systems communicate with one another? -> events seems to be the clear answer

how do events cause updates to the state of the game?
answer to this is less clear.

should there be a queue that takes in side-effecting events like :update-entity and :remove-entity,
and at the end of every frame the queue is flushed?
is this a good idea or a dumb idea?

i guess at that point there's not really much of a reason to use the event system - or is there?
the rendering system listens to :remove-entity events, after all

but yeah even so, maybe there should be some sort of (update-entity! entity-id a-fn) function that
the core game engine exposes, and a (remove-entity! entity-id) function too, and they're buffered
behind the scenes and don't use the event system at all to actually do their work
but somewhere along the line an :entity-removed event is fired so that the renderer system knows what's up.

so the voke.event system ends up being specifically for inter-system communication and non-game-state-related
side effects, and the core update-entity! and remove-entity! functions are for actually updating the state of
the game.

that could work. gonna sleep on it.

======

3/9/16

re: "i have no idea how any of this ever worked"

here's what's happening now, re: clobbering:
cljs.user=> (def foo (atom {}))
#'cljs.user/foo
cljs.user=> (swap! foo (fn [thing]
             (swap! foo assoc :blat :blot)
             (assoc thing 1 2)))
cljs.user=> @foo
{1 2}

and so of course the current event system's update-entity situation is getting clobbered, because it's all
happening inside of a swap!.

the way that things used to work was that the requestAnimationFrame loop swap!'d the main atom once per frame,
and as part of that swap! it'd fire a bunch of update-entity events. and *those events* would be consumed
by go-blocks and trigger swap!s that happened *outside* of the rAF swap!. and so that's how things actually worked.

anyway i still like the update-entity! and remove-entity! ideas from the end of yesterday's notes,
will probably put 'em in voke.state or something.

ok, cool, that totally worked the first time. nice.

running into an issue with the rendering system having trouble removing bullets. the behavior looks like this:
1) on frame N, the collision system detects that a bullet (entity with id E) has hit a wall
2) the collision system calls remove-entity! to queue entity E's removal from the game-state atom's :entities list
3) the collision system fires an :entity-removed event
4) the rendering system's :entity-removed handler fires, removes entity E from the stage and the objects-by-entity-id atom
5) the rendering system's tick function runs. it's given a list of the game-state map's entities.
  *this list contains entity E*, because the game-state atom hasn't yet been updated with the queued removal from step 2*
6) the rendering system detects an entity that isn't currently being drawn, and draws it on the screen.

an idea i've been toying with is pulling the rendering system's tick function out of the System infrastructure
and calling it directly right before the end of every rAF tick. i think i'm going to try this.

ok, that seems to have improved things.
except now, entities that collide with the left or right wall don't get removed, but ones that collide with the
top or bottom one are removed just fine. what gives?

fixed it by changing the place where :entity-removed events are emitted.

perf is okay, but suffers when there are ~30-40 projectiles on the screen at once.
i tried putting entities-can-collide behind a cache, but it's still called so many times per second that even the overhead
of looking in the cache n^2 times per tick is too expensive to keep up to realtime.
implementing quadtrees should likely fix this.

=====

3/10/16

notes from paper, mainly about priorities / next things to work on:

[DONE] 1) document/refactor attack branch
[DONE] 2) everything should have a :position and a :shape; split :x and :y out of :shape and put 'em in :position
   main use case for this right now is so that weapons can have a :projectile-shape that's a Shape
3) add a debug view, use reagent
   mainly thinking about having a slider and arrows, both of which let you revisit previous frames of history
   i guess you'll need to hit pause first or something? so there'll be a pause/play button
   use sliding window of history if memory usage becomes an issue
   the rendering system will have to handle disappearing/reappearing entities (so maybe the :entity-removed event
   goes away, and there's just an :entity-killed event that eg the loot/xp/etc systems listen to)
4) figure out what to do about this bullet collision rendering issue - right now, it looks to the player like
   bullets disappear before actually touching obstacles. this must be a common issue in games
   ideas:
   * if a bullet's moving fast and crosses 6 pixels of empty space in 1 frame before touching a wall/enemy, reposition
     it so that it's right next to its point of contact for 1 frame? don't like this idea.
   * spawn some sort of "ghost" bullet (decal?) at the bullet's contact site right after it dies, have it
     live for 1-2 frames (maybe this idea has potential)
[DONE] 5) get source maps to actually work so that i can debug this perf issue more easily
6) go through codebase and resolve any obvious TODOs worth immediately resolving
7) camera

okay, #1 and #2 are done

what do i want to do next?

#5 i guess?

ok, that was a fucking disaster, i burned 2 hours tweaking project.clj settings and in the end all i had
to do was restart chrome. oh well. source maps work now.

profiling indicates that when a ton of projectiles are on the screen, we spend:
77% of our time in move-system-tick
71% of our time in handle-intended-movement
65% of our time in find-contacting-entity
45% of our time in entities-can-collide
***4.5%**** of our time in shapes-collide (actually *checking* for collisions!!!!)

really gettin' familiar with the chrome profiling tools. good stuff. no obvious conclusions yet though

i wonder if it would be helpful to serialize the game's state during peak slowdown (where we're taking ~40ms/frame)
and then load it up and just run move-system-tick on it once and see what happens

AHA! i was making an instance of this "one-way-collision-check" function every single time two entities
were being checked for collidability! no wonder that was slow! we got back a *ton* of fps by fixing this.

ok, now one-way-collidability-check takes 25% of our time
6.66% in get-in
4.23% in not-eq

lol ok i managed to make collision detection faster but fuck up a bunch of stuff in the process

walls aren't colliding in the right places (likely due to this afternoon's :position shenanigans)
and also if the player touches a wall, the game crashes
i'm pretty fried, i'll deal with it next time

===

3/11/16

goals for today:

[DONE] 0) revert last commit from yesterday

[DONE] 1) rewrite core collision checking logic in vanilla JS, call out to it from cljs
  granger does this vanilla-js interop in https://github.com/ibdknox/ChromaShift
  https://github.com/liabru/matter-js/tree/master/src/collision has well-annotated js collision detection code

2) remove :intended-movement message, have movement system call out to collision system directly
  give colliison system an attempt-movement function that movement system can use, makes coupling explicit

http://www.bestinclass.dk/blog/brians-brain-optimized-clojurescript-html5 good perf writeup

ok actually before steps 1 or 2, i'm going to get rid of this separate :position field and put it back
in :shape, in :center like wtimoney does in https://github.com/wrmsr/voke/commit/27e3ab88b1bdc617c7643d64d96c5826c9d9d8b1

cool that was pretty easy, hopefully i didn't miss anything

on to step 1

ibdknox makes it looks pretty easy. he writes a vanilla js file, game.js:
https://github.com/ibdknox/ChromaShift/blob/master/js/game.js

which basically just defines a namespace and some functions (it looks like he's doing some sort of mapping
of entities to components and vice versa), and makes them available on window.Game.

and so to access these plain js functions from cljs, in
https://github.com/ibdknox/ChromaShift/blob/master/cljs/game/lib/core.cljs
he just accesses js/Game.a-fn-name

so let's try that.

making some progress on this approach. hilariously, the major bottleneck is converting clj datastructures
to js objects.

right now, on a profile where we spend 3161ms in process-frame,
we spend 2120ms converting entities to js objects
we spend 51ms actually checking for collisions

so if i can optimize the conversion codepath, we should be groovy.

ok continuing to work on optimizing conversions, but i'm seeing all sorts of weird perf behavior
(and btw there are some bugs in the vanilla js collision code, collisions don't seem to be happening at all)

so we spend 80% of our time in entities->js-objs

oh right uh maybe the reason that things get worse over time is that COLLISION DETECTION ISN'T WORKING
SO NO BULLETS EVER GET REMOVED
DUH

ok, like four hours later, that's enough for today

tomorrow let's circle back and clean up / document the state of the collision system

TODOs:
* kill :intended-movement message in favor of attempt-to-move function
* figure out how to get vanilla Collision js file to work with closure compiler :advanced mode

we can handle about 140 moving entities on the screen before we stop dropping the occasional frame, for posterity

just did some benchmarks
100 update-ins on :player cost about 1ms
100 get-ins on :player cost about 1ms
good to know

=====

3/12/16

notes / things i want to do next:

[DONE] 1) remove :intended-movement event in favor of attempt-to-move function
2) stop doing separate :x and :y movements, just do one combined movement and have the collision system
   sort things out.
     most of the time, you're not colliding, so moving in 2 steps all the time makes our average-case
     scenario slower.
     have the collision system attempt to apply the combined x/y movement - then if you collide with something,
     you definitely fire a contact event
     and after that, first try to move in the x direction, then in the y direction
     if both are blocked, that's fine. but make sure you fire *one* contact event total
     (can you call cljs functions from js? hopefully we don't need to get to that point)
[mostly done] 3) read prettified compiled js to see where all the overhead is in our cljs code, then keep profiling
   until as much overhead as possible goes away and most of the work is being done in js-land
4) look into quadtrees. right now we have ~140 moving entities before the system begins to slow down, and we're
   doing n^2 work. nlogn work is much much much more attractive. will need to have the quadtree live in js-land
   obviously

ok, #1 was easy enough.
right now, 13% of our time is lost inline in move-system-tick, and 8% is lost inline in attempt-to-move

hm maybe that 'self' stuff the timeline view was reporting was garbage?
the profiling view doesn't corroborate it

will stick with profiling view from now on, i think. timeline view is pretty, but kept fighting me.
we're cpu-bound here and not doing a ton of GCs or paints or whatever, so profiling view is plenty fine.

at this point, the majority of the cljs overhead i've been able to find has been optimized away.
these are the things that are keeping us slow:

1) moving in 2 steps, first x then y (see #2 above)
2) doing n^2 comparisons when doing collision checks (see #4 above)

so let's tackle them in that order.

ok i started on #1 but the collision system is currently all fucked up as a result

gonna need to do some thinking about the best way to express the collision system doing this:
* try moving the entity to its desired new x/y position
  * if that works
    * great
  * if that doesn't work
    * fire a contact event
    * try moving it to its desired new x position
      * if that works
        * great
      * if that doesn't work
        * find the closest clear x position and move it there
    * try moving it to its desired new y position
      * if that works
        * great
      * if that doesn't work
        * find the closest clear y position and move it there


we can deal with quadtrees in a few days, the collision system cljs is likely to get a bit hairy over the
next few hours of work and so i'll be wanting to do a good amount of refactoring on it
because i am about to fuck it up like crazy

the above bullet points are proving to be harder than i expected to expressin code.
wrote some awful shit, stashed it, gonna try again tomorrow from scratch.

you know what, this is proving to be more trouble than it's worth. shelving it for now.
let's do quadtrees next instead.

=====

3/14/16

ok, so does the quadtree live in js or cljs?
i'm betting js.

--- time passes ---

ok i went on a walk and did some more thinking about the 2-calls-vs-1-call movement->collisions system thing
i had some trouble working on it yesterday, both because i was pretty hungover but also because i kept
worrying that there was some case where we try to resolve a collision and just literally can't.
but i don't think that such a case exists. as long as we update the collision system every time
a) an entity is created
b) an entity is moved
c) an entity is deleted,
and we do validation at a)-time and b)-time, the collision system will never be in an invalid state.

there are a few other things i'm worried about. for instance, what if an entity's moving to the right,
and it collides with *two* entities in a single frame, and we try to resolve its collision by moving it
to the unoccupied spot to the left of the entity it collided with, but we pick the *rightmost* of the two
entities instead of the *leftmost*?
the solution is for the js collision system to return a list of all the entities collided with,
and for the resolution system (?) to do its homework and figure out which enttiy's relevant.

resolution system... i kinda like the sound of that. what would that look like?

ok, cool, i spent today following that thread and i think it turned out pretty well.
the collision system is easier to read+understand, and everything seems to be working, and i've tightened
up a bunch of loose perf spots.
lots of stuff in cljs is slow. get-in is slow. update-in is slow. assoc-in is slow. merge is slow.
calling functions is slow.

hopefully these things will improve over time? in the meantime, just gotta work around 'em.
i wonder if austin's run into any of these perf problems i've been facing?

anyway, tomorrow it's finally time for quadtrees, because today i got the 2-call->1-call thing to happen.

or maybe i'll look into a few other things first :)

* records (schema has support for 'em) - benchmark them against maps
  * interested in get-in, update-in, assoc-in performance
  * curious to read the generated js
  * http://alexkehayias.tumblr.com/post/78711349238/entity-component-model-in-clojurescript sketch re: ecs
* https://funcool.github.io/clojurescript-unraveled/#transients - would `into` be a good fit for some of our
  hot spots? assoc-ins, merges, etc?
* figure out what externs are, get collision.js hooked up / able to be advanced-compiled
  really interested to see if the cljs overhead i'm seeing persists through advanced compilation
  if not, it could render the above two bullet points unnecessary

"The intent is that, unless interop forces one to go beyond their circumscribed scope, one need not leave
Clojure to get the highest-performing data structures possible on the platform."
- http://clojure.org/reference/datatypes

hm - worth looking into this to see if collision.js could actually just be fine if we used records

would be interesting to benchmark/profile a cljs+defrecord vs vanilla-js version of collision.js

notes from benchmarking a simple entity map-vs-record implementation in cljs-sandbox:
(update-in player-map [:shape :center :x] (fn [x] (inc x))), 10000000 runs, 22819 msecs
(update-in player-record [:shape :center :x] (fn [x] (inc x))), 10000000 runs, 17327 msecs
(assoc-in player-map [:shape :center :x] 6), 10000000 runs, 19845 msecs
(assoc-in player-record [:shape :center :x] 6), 10000000 runs, 14406 msecs
(get-in player-map [:shape :center :x]), 10000000 runs, 11781 msecs
(get-in player-record [:shape :center :x]), 10000000 runs, 8446 msecs

so on the whole, operations on records appear to run in about 70-80% of the time that they take on maps.
which is certainly a speed boost, but isn't the like 10x increase i was hoping for.

tried again with advanced optimizations

(assoc-in player-map [:shape :center :x] 6), 10000000 runs, 16450 msecs
(assoc-in player-record [:shape :center :x] 6), 10000000 runs, 7049 msecs
(update-in player-map [:shape :center :x] (fn [x] inc x)), 10000000 runs, 7421 msecs
(update-in player-record [:shape :center :x] (fn [x] inc x)), 10000000 runs, 8872 msecs
(get-in player-map [:shape :center :x]), 10000000 runs, 4713 msecs
(get-in player-record [:shape :center :x]), 10000000 runs, 4284 msecs

so assoc-in appears to be super cheap for records in advanced mode for... some reason. and otherwise it appears to
mostly be a wash.

current mystery - https://www.evernote.com/shard/s11/sh/39854162-88a7-4fd6-88e5-b01f25183ef7/b63355ace4a9966e
cannot figure out what is going on here.
gonna read through the relevant cljs source and generated js i guess
might have to ask in slack
...oh christ if i expand it i see it's just flush!
whooops.

====

3/15/16

on a hunch tried this
(-> player-map :shape :center :x), 10000000 runs, 2215 msecs
(->> player-record :shape :center :x), 10000000 runs, 1502 msecs
(get-in player-map [:shape :center :x]), 10000000 runs, 2674 msecs
(get-in player-record [:shape :center :x]), 10000000 runs, 2316 msecs

so two things to try first off today:

1) try threading macros instead of get-in
2) dig into flush, see if it's easily optimizable
      seems like a perfect situation to use a transient, right? or into or something?

and then also i want to look into setting up externs for collision.js, so we can see how all this performs
(and profiles) in advanced mode

http://clojure.org/reference/transients

"You run into a similar scenario, at a higher level, when you want to initialize or transform a
large persistent data structure using multiple steps, none of which will be seen by any code other
than the constructing/transforming code. The challenge here is that the source of a transformation
will be an existing persistent data structure, and the result of the function _will_ be shared."

create a transient with (transient my-thing)
creation is o(1)
(peristent! the-transient) is o(1)
calling transient! on an entity won't make its nested maps transient, though!

well, applying transients to flush! didn't help all that much - at best, we shaved off 2% of the program's runtime

threading macros don't seem to have bought us all that much either, update-position remains at 4% of our runtime
no matter what i try

so, let's try externs next, and then finally quadtrees after that

more notes tho

(assoc player-map :renderable true), 10000000 runs, 991 msecs
(assoc player-record :renderable true), 10000000 runs, 1975 msecs
(-> player-map :shape :center (assoc :x 5)), 10000000 runs, 5620 msecs
(assoc (-> player-record :shape :center) :x 5), 10000000 runs, 2476 msecs
;
(assoc player-map :renderable true), 10000000 runs, 908 msecs
(assoc player-record :renderable true), 10000000 runs, 1480 msecs
(-> player-map :shape :center (assoc :x 5)), 10000000 runs, 2187 msecs
(assoc (-> player-record :shape :center) :x 5), 10000000 runs, 1355 msecs
;
(assoc player-map :renderable true), 10000000 runs, 773 msecs
(assoc player-record :renderable true), 10000000 runs, 1366 msecs
(-> player-map :shape :center (assoc :x 5)), 10000000 runs, 2152 msecs
(assoc (-> player-record :shape :center) :x 5), 10000000 runs, 1419 msecs
;
(assoc player-map :renderable true), 10000000 runs, 809 msecs
(assoc player-record :renderable true), 10000000 runs, 1455 msecs
(-> player-map :shape :center (assoc :x 5)), 10000000 runs, 2049 msecs
(assoc (-> player-record :shape :center) :x 5), 10000000 runs, 1450 msecs

bare assocs seem to be slower on records than on maps
but assoc-ins are faster on records than on maps
ugh whatever

ok, i got externs working, nice
that wasn't so bad
lost most of a day to this dumb issue where i had a file with the ns voke.system.collision.utils
but the file was util.cljs instead of util.cljs
because ugh

anyway that's working now
so i'm profiling the advanced-mode js
i don't completely understand it, it looks like there's two distinct-but-same codepaths that start in the move
system and bottom out in the vanilla js Collision

anyway uh it looks like quadtrees are definitely the right next step. cool. will start researching
what the hell those are

https://www.youtube.com/watch?v=TJzq_kjtGTc well this sure looks promising

hm, dmitriy suggests typed arrays
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays
eh, i'll look into 'em later

or spatial hashing? https://www.youtube.com/watch?v=gkKc3upnZU8

https://gamedev.stackexchange.com/questions/69776/when-is-a-quadtree-preferable-over-spatial-hashing hm

"All of which isn't to imply that a tree structure is always the right choice, of course. Flat grids
are ideal for the situation you have in your example -- dense clouds of objects pretty much evenly
spread everywhere in the world, and we're doing simple, inexpensive collision tests. Absolutely a grid
is likely to be the optimal approach in that case!"

http://zufallsgenerator.github.io/2014/01/26/visually-comparing-algorithms/

ok spatial hashing is sounding pretty good man

https://stackoverflow.com/questions/4981866/quadtree-for-2d-collision-detection

" if you look at the benchmarks in the last section you will see that of all the libraries surveyed,
quadtrees tended to perform quite poorly compared to other collision detection methods like R-Trees,
grids or segment trees."

http://gamedevelopment.tutsplus.com/tutorials/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space--gamedev-374
"Any object that cannot fully fit inside a node’s boundary will be placed in the parent node."
that answers the main question i've had about quadtrees

"At every frame, you’ll insert all objects into the quadtree by first clearing the quadtree then
using the insert method for every object."
hm - that's the other question i've had. seems odd but maybe it's fast?

http://0fps.net/2015/01/07/collision-detection-part-1/

http://0fps.net/2015/01/18/collision-detection-part-2/ cautions against grids when:
"High aspect ratio: If the ratio of the largest to smallest side of the boxes in the grid is too extreme,
then grids will always fail catastrophically. There is no easy fix or known strategy to avoid this
failure mode other than to not use a grid."

hm - what's "too extreme" mean here?

"when grids work they are effectively optimal.  The trouble is that when they fail, it is catastrophic."
eeeeee

********* THIS ARTICLE IS FUCKING GOLD
http://0fps.net/2015/01/23/collision-detection-part-3-benchmarks/
he says he highly recommends https://github.com/mourner/rbush , puts it in bold and italics

he says box2d is super slow

"For large, uniform distributions of boxes, grids are still the best.  For everything else, use segment trees."

https://www.reddit.com/r/gamedev/comments/3jrtpc/quadtree_vs_spacial_hashing_which_to_use/
has lots of people shitting on quadtrees

*** FYI
https://www.reddit.com/r/gamedev/comments/4adlsk/16gb_of_high_quality_sound_effects_the_sonniss/
has tons of free sound effects / audio
for later

ok anyway so he said https://github.com/mourner/rbush is good, let's look at it

consider looking into https://github.com/schteppe/p2.js if i end up doing non-box things

======

3/16/16

ok rbush was easy to use and now checking collisions takes 1% of our time
ezpz

that was a lot easier than i expected
thanks, 0fps guy!

https://stackoverflow.com/questions/5319282/game-engines-what-are-scene-graphs what even is a scene graph tho

ok, current bottlenecks appear to be
1) render system gets slow over time
2) timeline view indicates that doing many rbush.remove() calls triggers a major GC
TODO - look into some form of rbush-related object pooling

anyway i'll look into these a *little* - and also i want to read more about what rbush is and how it works -
but after that let's do something more interesting. like, i dunno, monsters?

https://github.com/pixijs/pixi.js/issues/351 mentions pixi.debug.js

http://www.html5gamedevs.com/topic/3208-pixi-performance-tile-maps-canvas-and-rendertexture/

http://www.html5gamedevs.com/topic/1315-performance-improvement-suggestions/
" I think an object culling pass should be added to skip off-screen sprites rendering."

"Off screen culling is userland responsibility. You should be culling items in your engine, that is not
something we will be adding into Pixi any time soon. The tools to make an item not be rendered are there
(visible = false) you just need to use them. Creating a tilemap where you spawn every tile and show them all
(even the ones off screen) is ineffective.
Try looking at some of the tilemap engines built on pixi to see how you can easily do a smooth scrolling
engine that only ever creates the number of tiles shown on the screen."

https://github.com/pixijs/pixi.js/issues/48

https://github.com/pixijs/pixi.js/issues/356

"less Graphics objects means less buffer switching and more batching, so better performance."

hm... how can we have fewer graphics objects?

https://stackoverflow.com/questions/33437002/pixi-js-animate-circle-improving-performance

ok cool that worked great, rendering system is no longer a perf bottleneck

so at this point we're not dropping any frames at all

so i'll just do add-entity! and then we'll be ready to start on monsters

actually i'm kinda torn between starting on monsters and starting on bigger levels / camera
i think monsters'll be more fun though

MONSTER NOTES / ORDER OF OPERATIONS:
[DONE] first just make static ones
[DONE] then make ones that fire
then draw them in red or something
and draw their projectiles in some redlike color too
then make ones that move toward you
then make ones that fire toward you
then implement health and damage
then implement invincibility+melee damage
then implement death

ok, i made a good amount of progress but now i have to go home

outstanding TODOs / things to work on next

[DONE] 1) clean up the code
2) hilariously, i can never move the player character into the stream of bad guy bullets.
   look into what's happening and fix it (bad guy bullets should be removed, contact events fired)

=======

3/17/16

https://adambard.com/blog/clojure-reducers-for-mortals/ indicates that core.reducers buys you significant
performance increases in clj. should benchmark them to see if they work similarly in cljs.

https://bendyworks.com/transducers-clojures-next-big-idea/

apparently reducers were neat but now it's all about transducers?
what?

http://kukuruku.co/hub/funcprog/clojure-transducers-reducers-and-other-stuff

scratchpad:
player is entity 0
bullet is entity 1
another bullet is entity 2

player moves in such a way that it intersects bullets 1 and 2

* resolve-collision is called with entity 0, contacted-entities 1 and 2
    * entities 1 and 2 are queued for removal, entity 0 is allowed to make the move it wanted to
* resolve-collision is called with entity 1, contacted-entities 0
    * entity 1 is queued for removal
* resolve-collision is called with entity 2, contacted-entities 0
    * entity 2 is queued for removal

a few options on how to proceed
* voke.state's remove-entity! pipeline can squash duplicates
    * i don't like this, seems like it's hiding smelly code
* collision system can use a function that sits on top of remove-entity! and fires a -stop-tracking-entity
    * i think i like this approach

hm, approach 2 seems to fuck us actually
by the time that resolve-collision is called on entities 1 and 2, they've been removed from the collision system
and so it's like "what"
should removal be made somehow eager? *can* it be? i don't think so

what situations are we worried about here

in the same tick:
player runs into bullet, takes damage, destroys bullet
bullet runs into player, causes damage, destroys bullet

etc

how to avoid/solve?

right so we just defer updating the vanilla-js collision system's state until the update-entity event
is actually *processed*, rather than when it's queued, that makes more sense / makes things more consistent

but so what if the player and the bullet are moving toward each other, and intersect in the same frame?
you still end up with a situation where entity 0 has moved into entity 1's space, and entity 1 has moved
into entity 0's space

so you're *definitely* going to wind up with duplicate contact events - one for [0 1], another for [1 0]
and they're processed synchronously, with no queueing, so you can't easily dedupe

i guess the collision system could keep an atom that's reset every frame
and the atom has a set of sets like {0 1}
and so if you notice a collision between entities 0 and 1 and you resolve it, you record it
hm but like what goes in the set / how is it checked

maybe you just have an atom that's a set of dead entities
and if you get an attempt-to-move! call for an entity that's already been killed this frame, you just
drop it on the ground

that solves the problem for projectiles, but
what about if a player and a monster both try to move into each other?
the player's nudged so it's right next to the monster, and a contact is fired
the monster's nudged so it's right next to the player, and a contact is fired

the end goal is that the player is only damaged once
whose responsibility is it to dedupe this?

does the collision system keep two atoms, each of which is reset every frame,
and one of them is a set of dead entity IDs,
and the other is a set of pairs of IDs that have had collision events fire?

======

3/18/16

i ended up doing all that stuff above re: collision system

hung out with the pdx clojure guys last night, they said transducers definitely sound relevant to the perf/
overhead issues i've seen. boy i have a lot of reading to do

also at some point i should look into http://gafferongames.com/game-physics/fix-your-timestep/ again

also need to look into having a moving camera - i think we can just adjust the root Graphics node's
x and y, might be pretty easy to get working

======

3/21/16

i have done nothing for the past 48 hours aside from playing the division.
i'll get back to work tomorrow.

=====

3/22/16

spent most of day doing adult stuff, taxes etc.

here's where voke is currently at

1) i need to read / process / decide http://gafferongames.com/game-physics/fix-your-timestep/
2) i want to look into transducers to see if they can help eliminate some of the cljs-land overhead
i've been seeing in profiles.
3) continue work on monsters as per notes from a few days back; spin up a voke/system/ai/ folder with movement,
attack, etc namespaces, as well as a system namespace

assorted notes from hanging out with the clojure guys the other day:
https://www.conj.io/
https://github.com/rm-hull/monet
"if you're using a lot of functions inside maps, that's a sign that you might want multimethods"
"if you're doing a lot of type checks, that's a sign that you might want protocols"

http://gafferongames.com/game-physics/integration-basics/
"An excellent option for greater accuracy and less memory when simulating a large number of particles
is verlet integration. In this case, the integrator does not require storing velocity per-particle, as
it derives it from the difference in the previous two frames position values. This makes collision
detection and position fix-up (eg. pushing particles out of collision) really quick and easy to implement."
sounds super interesting

=======

3/23/16

http://gafferongames.com/game-physics/fix-your-timestep/

ok i'm having a hard time processing this writing/code style for some reason
so in "semi-fixed timestep" he's got an approach where
every frame, you check to see how long it's been since the beginning of the last frame, call that X
let's say X is .1 seconds
if so, you process N ticks of your game's logic, where N is .1 / (1/60), which is basically 6
and then you render
let's say X is 0.001 seconds somehow
if so, you process 1 tick of your game's logic

"we’re now taking multiple steps per-display update including one additional step to consume any
the remainder of frame time not divisible by dt. This is no problem if you are render bound, but
if your simulation is the most expensive part of your frame you could run into problems including
the so called “spiral of death”."

"You really need to ensure that it takes significantly less than X seconds of real time to update X
seconds worth of physics simulation. If you can do this then your physics engine can “catch up” from
any temporary spike by simulating more frames. Alternatively you can clamp at a maximum # of steps
per-frame and the simulation will appear to slow down under heavy load. Arguably this is better than
spiraling to death, assuming of course that the heavy load is just a temporary spike."
hm

"The renderer produces time and the simulation consumes it in discrete dt sized chunks." hm
new code chunk
at the start of each frame, you check to see how long it's been since the beginning of the last frame, call that X
you keep an "accumulator" value that basically stores the.. remainder of any.. trailing frame time.
bad wording on previous line but this stuff is unusual for me
basically it seems like this is the exact same as the above code chunk, except it addresses the
"including one additional step to consume any the remainder of frame time not divisible by dt"
bit from the first chunk

"we only ever integrate with steps sized dt so it follows that in the common case we have some unsimulated
time left over at the end of each frame. This is important! This left over time is passed on to the next
frame via the accumulator variable and is not thrown away."

code snippet from game programming patterns
http://gameprogrammingpatterns.com/game-loop.html#play-catch-up

"Note that the time step here isn’t the visible frame rate anymore. MS_PER_UPDATE is just the granularity
we use to update the game. The shorter this step is, the more processing time it takes to catch up to real
time. The longer it is, the choppier the gameplay is. Ideally, you want it pretty short, often faster than
60 FPS, so that the game simulates with high fidelity on fast machines."

"The end result is the game simulates at a constant rate using safe fixed time steps across a range of hardware.
It’s just that the player’s visible window into the game gets choppier on a slower machine."

i'm really impressed by the clarity of this author's writing. this is much more comprehensible than the
fix your timestep article

i'm not super sure about this whole "render(lag / MS_PER_UPDATE);" thing, though - probably won't do that
i don't like the idea of having to teach the rendering system about velocities + positions
i dunno, maybe it would help address the issue where bullets "appear" to be vanishing a little bit before
they get to walls, because physics + collision detection happens before rendering

ok so at the end of the day, do i want to do this?
i guess i can cut a branch and give it a shot
maybe it won't even be that bad tbh
so we can try seeing what would happen if we ran the simulation at like 100fps and just render at 60fps
will we be able to get the performance necessary for that, though? already difficult enough hitting
60fps, and we're definitely not render-bound...
i dunno, man

======

3/24/16

http://www.html5gamedevs.com/topic/5509-how-do-you-guys-write-your-timestep-stuff-any-advice/
"setTimeout is good if you need your loop to continue running when the window is blurred", hm

"You need to make your calculations based on the delta, even if requestAnimationFrame will most
likely be ~60fps, because not ALL devices are 60fps. And in the future, when all devices are 120hz,
people might still be playing your game! "

okokok i'll need to do this good timestep business, fine

http://codeincomplete.com/posts/2013/12/4/javascript_game_foundations_the_game_loop/

"One additional note is that requestAnimationFrame might pause if our browser loses focus, resulting in
a very, very large dt after it resumes. We can workaround this by limiting the delta to one second"

nice

i'll limit it to 1 frame i think, rather than 1 second, to avoid tunneling / etc

"The basic idea is to accumulate our dt until it is greater than our desired fixed timestep, call
update with the fixed timestep, and carry over the remainder to accumulate for the next time."

http://codepen.io/anthdeldev/pen/QwGpxM

http://www.isaacsukin.com/news/2015/01/detailed-explanation-javascript-game-loops-and-timing
***** this is a very good article

========

3/28/16

ok cool back in the saddle

so right now i'm trying to get the core game logic to tick at 100fps, and leave the rendering system at 60fps
and i'm running into this situation where the rendering system is being told to move entities that it doesn't
yet know about

i guess the right thing to do here is for the rendering system to discard movement events if it isn't already
tracking the entity, because it'll pick the entity up at the next rendering tick

okok that was easy enough to fix.

now i'm digging into some weirdness re: getting the attack system to generate evenly-spaced bullets.
i'm running into issues because
* the attack system uses (now) to figure out how much time has passed, so it can check to see
  if the given entity is ready to fire again
* (now) currently uses js/performance.now, which tracks *wall* time, not sim time
* multiple sim ticks can happen in rapid succession

so i guess we need to have a clock that tracks sim time. might as well add it to util i guess
nah let's do voke.clock

ok made some progress with time

ran into an issue where the monster's weapon was behing like this:
it would shoot a lot of bullets quickly with little spacing between them for a while
then it would shoot them with more spacing between them for a while
then it would revert back, etc

it was supposed to fire 20 times a second

each tick, the amount of time that had passed since the last time the weapon had fired looked like this sometimes:

16.66666666666424
33.33333333332848
49.999999999992724

and other times it looked like this:

16.66666666666788
33.33333333333576
50.00000000000364

and so basically sometimes the weapon would fire every 4 ticks, and sometimes it would fire every 3 ticks
because of something something floating point math

=======

3/29/16

ok whatever transducers
https://www.youtube.com/watch?v=6mTbuzafcII

https://youtu.be/6mTbuzafcII?t=27m26s mentions speed

there's no actual (mapping f)
just (map f) returns a transducer

http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming

pretty good code snippets on that post

http://kukuruku.co/hub/funcprog/clojure-transducers-reducers-and-other-stuff

(def cc (vec (range 10000000)))
(time (reduce + 0 (->> cc (filter odd?) (map inc))))
"Elapsed time: 697.390000 msecs"
(time (transduce (comp (filter odd?) (map inc))
                 +
                 cc))
"Elapsed time: 358.080000 msecs"

https://gist.github.com/ptaoussanis/e537bd8ffdc943bbbce7
**** lots of discussion on this one

http://stackoverflow.com/questions/26317325/can-someone-explain-clojure-transducers-to-me-in-simple-terms

ok so the transducer is the process, like
(comp
  (map inc)
  (filter even?))
that's a transducer right there apparently.
whereas (map inc) is.. a reducing function? or is it also a transducer
hm i think inc is actually the reducing function
(map inc) is a transducer

a poster on that SO thread suggested that transducers may be more valuable for folks like rich / david / etc
than they are for plebs like me, abstraction-wise
but still might be able to use them for perf

http://clojure.org/reference/transducers

To apply a transducer to an input collection and construct a new output collection, use into
(which efficiently uses reduce and transients if possible):
(into [] xf (range 1000))

ok, anyway let's see if we can get any perf out of all this business

profile indicates that we spend 7.2% of our time in process-update-events

lol i ended up with this just completely batshit insane reimplementation

  (if (seq update-events)
    (assoc state
           :entities
           (transduce (fn [step]
                        (fn
                          ([result] (step result))
                          ([result event]
                           (step result
                                 [(event :entity-id)
                                  ((event :fn) (get result (event :entity-id)))]))))

                      (fn ([acc] acc)
                        ([acc [k v]]
                         (assoc acc k v)))

                      (state :entities)

                      update-events))
    state)

which is completely retarded - i'm sure i'm doing this wrong - and affects perf not at all, not even a little

anyway i don't think transducers are even relevant to this particular situation. all i want to do is
take a map of {thing-id: thing}
and a list of events that look like {:thing-id an-id :fn a-function}
and apply those events to the original map
and i think that the preexisting implementation in voke.state already does as good a job of this
as we're likely to get

http://ignaciothayer.com/post/Transducers-Are-Fundamental/

transducers seem to basically be useful when you have a list/stream/whatever of inputs, and you want
to do some arbitrary operations on them, and so if you have like ten operations that you want to chain together,
transducers can buy you a lot of performance there.

but in my situation, i tend to have some inputs and i want to apply all of them to a particular single
map, and vanilla reduce seems to be about as good as it's possible to get

ok started work on ai movement
the monster trundles along after the player
but if both of them move into each other, weird shit happens in collision resolution
if player is above and monster is below, and they move toward each other vertically, player's x-position gets
nudged so that it's to the right of the monster

i'll deal with it tomorrow

to make things simpler, have the monster always move up very slowly

====

3/30/16

this situation is a bit difficult to debug / reason about. i wonder if it would be helpful to slow things to
like 5fps and to add a pause button - so if you hit P, time stops. that could be useful

anyway so what's happening?

player is 0, moving down
monster is 5, moving up

A:
system resolves for 0
nothing contacted in x direction
contacted 5 in y direction
0's bottom is moved to be right above 5's top (todo confirm this is working correctly)

B:
system resolves for 5
nothing in x direction
contacted 0 in y direction
5's top is moved to be right below 0's bottom

at this point 0 has y 291.01412121520923
5 has y 315.61896848408577

the difference between those two numbers is 24.60484726887654

so the resolution system puts 0 and y too close together!

...hm i think this is happening because step B isn't aware that step A has happened and 0's position has shifted
0 starts at y=290.608 and is moved to y=291.014
5 starts at 316.024 and is moved to y=315.618

yeah

well, why is B happening?

0 is moving down
5 is moving up

0 attempts to move
A happens
0 is nudged to be in a good spot so it's right above 5
js system's state is updated to reflect this

5 attempts to move
B happens because 0 is *right* above 5
cljs system is using out-of-date center for 0, moves 5 to the wrong spot

one resolution: have cljs system ask for most up-to-date position of 0 before moving 5

ok i did that

still a few lingering problems

sometimes the player teleports in.. certain situations. not sure which. particularly if it's chasing you
and you stop moving (?)
also if you're shooting a bunch of bullets and it collides with you as a bullet's dying, sometimes it crashes?
not sure what's going on in either situation

ok i fixed the second of thsoe two things
haven't started on the first yet

ok, what's happening here
can't really reproduce it reliably
it seems to happen when the monster catches up to you - diagonally - as you're slowing to a stop

resolving for 5 -> no further logging?!

is it the situation where an entity's corner precisely collides with your corner?

yeah i think it might be

we handle a collision for 5
we check each axis to see if 5 is clear to move on that axis
and it *is* clear to move on both axes
but then we move it and bad shit happens

======

3/31/16

ok i did some thinking about this corner collision situation

so the problem is that we're in a situation where you're clear if you *just* move laterally, and clear if you
*just* move vertically, but if you actually apply both axes' movement direction, you collide with something

right now, the resolution system's like "cool you're clear on top and clear on the right so go ahead and
move up and right", and then you're in an invalid place and things get a little fucked up

so i think the right way to solve this is to detect when we're in this situation (pretty easy: when we've
been asked to resolve a collision, but we appear to be clear vertically and horizontally)

and when that happens:

take the list of entities that we know we've collided with
break them down into all of their component lines
  so eg an entity with width 10 height 10 that's at x=20 y=40 would have 4 lines
  x=10, x=30, y=30, y=40

take the line that the moving entity is traveling on - figure out a way to express it, we have its position
and its direction so it should be easy to turn that into a line; call that L or whatever

then, for each of our collided entities' lines, calculate the point at which line L intersects with it
so now we have a set of points
then all you do is figure out which of those points is closest, and - say the entity is moving up+right - you
just move its top-right corner to be at (or slightly slightly before) that point

i think i have a little more hammering out to do, but that sounds like a reasonable way of solving the problem

======

4/4/16

http://www.eff-lang.org/ looks neat, found via an article pwrice sent me

which was https://codewords.recurse.com/issues/six/immutability-is-not-enough , which i thought was good

======

4/5/16

garrick says his game state handling works similarly to voke.state, except with a priority int as well,
to determine the order in which updates are applied. interesting

ok well let's try this line stuff

======

8/30/16

whoops it's been a while

reading through some links from http://www-cs-students.stanford.edu/~amitp/gameprog.html

http://intrinsicalgorithm.com/IAonAI/2012/11/ai-architectures-a-culinary-guide-gdmag-article/ talks about finite
state machines vs behavior trees vs planners

i really like amit's aside on AI systems:

In choosing a technique for AI in your games, keep it as simple as possible; read this. If you know the
answer, put the answer into the program. If you know how to compute the answer, put the algorithm for
computing it into the program. Only if you don’t know the answer, and don’t even know how to compute the
answer, should you resort to complex techniques that can learn how to find the answer. These complex
techniques can come at a high price, in terms of programming time, game performance, difficulty of
debugging, and lack of control.

the "lack of control" bit was non-obvious to me, and is echoed in this "culinary guide" article when he talks
about planners:

"""
From an implementation standpoint, a major plus of the planner is that a new action can be dropped into the game
and the planner architecture will know how to use it. This speeds up development time markedly. All the author says
is, “here are the potential things you could do… go forth and do things.”

Of course, a drawback of this is that authorial control is diminished. In a FSM or BT, creative, “outside the box”
solutions were the exception from the predictable, hand-authored systems. In a planner, the scripted, predictable moments
are the exception; you must specifically override or trick the planning system to say, “no… I really want you to do
this exact thing at this moment.”
"""

according to this taco guy, behavior trees are more common than planners, but FEAR used a planner:
http://alumni.media.mit.edu/~jorkin/goap.html

`While utility-based systems can be used in many types of games, they are more appropriate in situations where there
are a large number of potentially competing actions the AI can take—often with no obvious “right answer.”`

http://alumni.media.mit.edu/~jorkin/gdc2006_orkin_jeff_fear.pdf

`If the audience of GDC was polled to list the most common A.I. techniques applied to games,
undoubtedly the top two answers would be A* and Finite State Machines (FSMs). Nearly
every game that exhibits any A.I. at all uses some form of an FSM to control character
behavior, and A* to plan paths.`

so i will probably be using FSMs and A* when it comes time for monster behavior

i guess monsters can have states like

idle
pursuit
combat
leash

etc

"As much as we like to pat ourselves on the back, and talk about how smart our A.I. are, the
reality is that all A.I. ever do is move around and play animations! Think about it. An A.I. going
for cover is just moving to some position, and then playing a duck or lean animation. An A.I.
attacking just loops a firing animation. Sure there are some implementation details; we
assume the animation system has key frames which may have embedded messages that tell
the audio system to play a footstep sound, or the weapon system to start and stop firing, but as
far as the A.I.’s decision-making is concerned, he is just moving around or playing an
animation."

"The previous case study illustrates the first of three benefits of a planning system. The first
benefit is the ability to decouple goals and actions, to allow different types of characters to
satisfy goals in different ways. The second benefit of a planning system is facilitation of
layering simple behaviors to produce complex observable behavior. The third benefit is
empowering characters with dynamic problem solving abilities."

perhaps overkill for our purposes in voke, but cool to read about

..."This dynamic behavior arises out of re-planning while taking into account knowledge gained
through previous failures. In our previous discussion of decoupling goals and actions, we saw
how knowledge can be centralized in shared working memory. As the A.I. discovers obstacles
that invalidate his plan, such as the blocked door, he can record this knowledge in working
memory, and take it into consideration when re-planning to find alternative solutions to the
KillEnemy goal."

http://aigamedev.com/open/review/planning-in-games/

"In the cases of action/combat games, we can easily build robust AI that looks deliberate using
simple reactive techniques like behavior trees. In fact, it's difficult to tell the difference
for such applications between the behavior generated by a planner compared to more reactive
approaches, yet the planning process will be noticeably slower at runtime and require more development time."

https://archives.nucl.ai/recording/building-a-galaxy-procedural-generation-in-no-mans-sky/
"we're building a game, not a tech demo" - har har

http://aigamedev.com/open/article/hfsm-gist/ heirarchical FSMs

http://aigamedev.com/open/article/bt-overview/ behavior trees

==========

9/3/16

http://gamesfromwithin.com/data-oriented-design

"Programming, by definition, is about transforming data: It’s the act of creating a sequence
of machine instructions describing how to process the input data and create some specific output data"

"In general, the ideal data is in a format that we can use with the least amount of effort"
"In any case, the goal is to minimize the amount of transformations, and whenever possible,
you should bake your data into this ideal format offline, during your asset-building process."

"To achieve the best possible data layout, it’s helpful to break down each object into the
different components, and group components of the same type together in memory, regardless of
what object they came from. This organization results in large blocks of homogeneous data,
which allow us to process the data sequentially"

http://buildnewgames.com/particle-systems/
** good article

object pooling makes a lot of sense in particle systems

"Instead what we need is a pool of particles. When we want to fire a particle out, we will
grab an available one from the pool. When a particle dies, it will be returned to the pool
to be recycled later."

=========

9/4/16

http://norvig.com/lispy.html

http://norvig.com/lispy2.html

http://www.redblobgames.com/pathfinding/a-star/introduction.html
***** great

"Dijkstra’s Algorithm can find paths to all locations; A* finds paths to one location."

super fuckin great article

a* is djikstra + greedy best first search

"If you want to find paths from or to all all locations, use Breadth First Search or Dijkstra’s Algorithm.
  Use Breadth First Search if movement costs are all the same; use Dijkstra’s Algorithm if movement costs vary.

If you want to find paths to one location, use Greedy Best First Search or A*. Prefer A* in most cases."

"A* is guaranteed to find the shortest path if the heuristic is never larger than the true distance.
As the heuristic becomes smaller, A* turns into Dijkstra’s Algorithm.
As the heuristic becomes larger, A* turns into Greedy Best First Search."

"What about performance? The best thing to do is to eliminate unnecessary locations in your graph."
recommends reading http://www.redblobgames.com/pathfinding/grids/algorithms.html if using a grid

"I’ve not needed any of these optimizations in my own projects." interesting
quadtrees are mentioned

http://theory.stanford.edu/~amitp/GameProgramming/Heuristics.html

http://theory.stanford.edu/~amitp/GameProgramming/UserExperience.html

"Making units too smart is almost as bad as making units too dumb. If the player has to deal
with fog of war but the pathfinder has access to the entire map, the units will mysteriously
know where to go even though the user does not. That’s a clear sign to the user that something
odd is going on. On the other hand, it gives better paths. A compromise is to scale up the
movement costs on unexplored areas."

http://theory.stanford.edu/~amitp/GameProgramming/MapRepresentations.html

"The most common alternative to grids is to use a polygonal representation. If the movement cost
across large areas is uniform, and if your units can move in straight lines instead of following
a grid, you may want to use a non-grid representation."

"In many grid games, there are large areas of maps that have uniform movement costs. A* doesn’t
“know” this, and wastes effort exploring them. Creating a simpler graph (navigation mesh,
visibility graph, or hierarchical representation of the grid map) can help A*."

https://web.archive.org/web/20110723003329/http://www.ai-blog.net/archives/000152.html

this guy really likes navigation meshes

=========

9/5/16

http://www.redblobgames.com/pathfinding/grids/graphs.html

"Graph search algorithms like Dijkstra’s Algorithm and A* work on weighted directed graphs,
sets of nodes connected by edges that have numeric weights (movement costs) attached to them."

http://www.redblobgames.com/pathfinding/a-star/implementation.html

just implements a Graph, which is a set of (directed) locations and edges, no Node class

http://aigamedev.com/open/article/bt-overview/

pretty bad article

http://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php

"a behaviour tree is a tree of hierarchical nodes that control the flow of decision making
of an AI entity. At the extents of the tree, the leaves, are the actual commands that control
the AI entity, and forming the branches are various types of utility nodes that control the
AI’s walk down the trees to reach the sequences of commands best suited to the situation."

"A core aspect of Behavior Trees is that unlike a method within your codebase, a particular
node or branch in the tree may take many ticks of the game to complete."

hm
makes sense, interesting tho

so i guess the idea is that a particular node on an entity's behavior tree is active at
any given point in time, and it can have a certain state associated with it -
example states are success, failure, and running

it keeps talking about how nodes can return a value to their parent - eg:

"A composite node is a node that can have one or more children. They will process one or
more of these children [...] and at some stage will consider their processing complete
and pass either success or failure to their parent, often determined by the success or failure
of the child nodes. During the time they are processing children, they will continue to return
Running to the parent."

not sure i 100% follow this

i guess the idea is that one way of using a BT is to:
every tick, walk each npc's BT to see if any states have completed
for each active node: check all of its active children and see their statuses
if a child node is Running, then ignore it / let it continue
if it's marked as Success, then do something about that
if it's marked as Failure, then do something about that

this article is pretty solid; it makes BTs sound way more complicated than i'll ever need
in any game i'm likely to build, though; cool concept, but more useful in complex FPS/RPG games
where you really want to have rich/complex NPC behavior

my dudes are only ever gonna be idle, chasing, attacking, healing, or leashing, and probably
not ever really anything else to speak of

looks like BTs are actually most useful in a context where you've got some sort of GUI
tool that you've built to allow your characters' BTs to be manipulated, and you have some
sort of established library of Node classes, and so you're not actually writing code when
you're manipulating a character's behavior, you're just using this tool and dragging Nodes around

ok fuck it let's try to read the re-frame screed

https://github.com/Day8/re-frame

"we believe in one-way data flow"

"Although app-db is a Reagent atom (hereafter ratom), I'd encourage you to think of it as
an in-memory database. It will contain structured data. You will need to query that data.
You will perform CRUD and other transformations on it. You'll often want to transact on this
database atomically, etc."

ok, the history-lesson portion is all pretty straightforward

talks about `subscription`s, which appear to be a tool that you can use to have your component
functions query app-db (rather than just having them directly do like (:b @app-db) or whatever)

"subscription handlers" - functions that do a named query

"components never source data directly from app-db, and instead, they use a subscription."
"subscriptions are only ever used by components (they are never used in, say, event handlers)."

   (subscribe  [query-id some optional query parameters])

(register-sub) function hooks up query IDs to query functions

so far, it just seems like we've added a layer of indirection between component functions
and the app-db atom; hasn't yet been explained what this buys us

"We don't want to perform this computationally expensive re-sort each time something unrelated in app-db changes."

"Luckily, we can easily fix that up by tweaking our subscription function so that it chains reactions"

********
"That 3rd, expensive reaction will be re-run when either one of its two input Signals change,
right? Not quite. reaction will only re-run the computation when one of the inputs has _changed in value_."
********

this seems to be the main point of the discussion so far - using chained reactions so that
you only do expensive recomputations when you actually *have* to, rather than redoing them
every time the db changes in any way

"An application has many handlers, and collectively they represent the control layer of the application."

events are just data, like [:header-button-clicked :about] or whatever

you fire events with (dispatch)

event handlers take a) the value of @app-db and b) an event (a vector), and return the
new value which should be reset! into @app-db

(reg-event-db) is used to register events

"It is almost like app-db is the temporary place where this imagined perpetual reduce stores its on-going reduction."
cute

i wonder if multiple handlers can subscribe to the same event?

eg he keeps talking about how there's this stream of all events that have happened
how do you actually record that stream? can you make a handler that subscribes to all events
and just conjes them onto a list?

anyway reframe seems good, just like a good base common vocabulary for writing apps using reagent

=======

9/6/16

https://www.youtube.com/watch?v=fU9hR3kiOK0
samza

good talk, bit general but good intro to why streams / idempotence / etc are good in db-land

=======

9/7/16

ok cool

so what was i working on six months ago, anyway?

the last thing i wrote was "let's try this line stuff" - what the hell does that mean?

looks like i was tinkering around in collision.resolution, something to do with corner collisions

i should really start by going through and resolving every TODO i find in the codebase

the "line stuff" seems to refer to my notes from 3/31/16

=====

9/14/16

did some reading on kubernetes for no reason, that was fun

https://youtu.be/9MKY4KypBzg?t=52m22s has a good bit on coordinated omission
"when you see a vertical rise in a percentile chart, you should be extremely suspicious
of the input: your data is probably wrong."

recommends that you test your measurement system. seems like a good idea

always measure max time, can be a hint re: coordinated omission

https://www.usenix.org/system/files/conference/atc14/atc14-paper-ongaro.pdf raft paper

ok anyway i'm trying to set up dirac, a tool for debugging cljs

https://github.com/binaryage/dirac/blob/master/docs/installation.md

ok so things are kinda broken but kinda working

in order to get dirac and figwheel to happen at the same time, i do this:
(per https://github.com/bhauman/lein-figwheel/wiki/Using-the-Figwheel-REPL-within-NRepl )

lein repl
(use 'figwheel-sidecar.repl-api)
(start-figwheel!)

once all that's done, i get dirac and figwheel and things are mostly groovy.

this is obviously somewhat cumbersome though

i still need to solidify my understanding of this whole system, i'm kinda just flailing atm
in particular, i need to set up cursive integration per
https://github.com/binaryage/dirac/blob/master/docs/integration.md

and also need to figure out why my code isn't being run when you load the html page any more
complains about `voke` being undefined, even though `voke.core` has been goog.require'd

ok, connecting cursive to dirac was really easy, not sure exactly what it buys us quite yet

@smw in #dirac says that boot has really simple tooling around auto code reloading
gives this snippet:

(deftask dev-cljs-repl
  "Run a restartable system in the Repl"
  []
  (comp
   (environ :env {:http-port "3300" :dev true})
   (watch :verbose true)
   (system :sys #'dev-system :auto true :files ["handler.clj"])
   (reload :port 55554)
   (cljs-repl)
   (cljs)
   (speak)))

will have to take a look at that in the future

https://github.com/adzerk-oss/boot-reload
https://github.com/adzerk-oss/boot-cljs-repl
https://github.com/boot-clj/boot-cljs-devtools

====

9/15/16

https://github.com/adzerk-oss/boot-test

http://tech.adstage.io/2016/09/12/how-we-test-full-stack-clojure.html

http://clojure.org/guides/spec

so apparently a big part of spec is this concept of a central registry, so you do things like

(s/def ::date inst?)
(s/def ::suit #{:club :diamond :heart :spade})

(s/valid? ::date (Date.))
;;=> true
(s/conform ::suit :club)
;;=> :club

but is it not clumsy to have to do stuff like constantly referring to voke.specs/foo, voke.specs/bar, etc?

because like 99% of the time you're not going to be in the `voke.specs` ns

"You will see later that registered specs can (and should) be used anywhere we compose specs."

"When an or is conformed, it returns a vector with the tag name and conformed value:"
(s/def ::name-or-id (s/or :name string? :id int?))
(s/conform ::name-or-id "abc")
;;=> [:name "abc"]
(s/conform ::name-or-id 100)
;;=> [:id 100]

s/nilable exists:
(s/valid? string? nil)
;;=> false
(s/valid? (s/nilable string?) nil)
;;=> true

interesting - spec guide mentions #: syntax for auto-namespaced map keys, like this:

#:{ :foo {:bar :baz}}

apparently gets translated to eg

{:voke.core/foo {:voke.core/bar :voke.core/baz}}

not sure if it gets applied recursively, so it might just be

{:voke.core/foo {:bar :baz}}

yeah, doesn't get applied recursively:

user=> (= #:foo{:bar {:baz :quux}} {:foo/bar {:foo/baz :quux}})
false
user=> (= #:foo{:bar {:baz :quux}} {:foo/bar {:baz :quux}})
true

documented in https://groups.google.com/forum/#!topic/clojure-dev/8tHLCm8LpyU

interesting discussion on that thread

back to the spec guide, this paragraph is probably super important, on entity maps:

Clojure programs rely heavily on passing around maps of data. A common approach in other
libraries is to describe each entity type, combining both the keys it contains and the structure
of their values. Rather than define attribute (key+value) specifications in the scope of
the entity (the map), specs assign meaning to individual attributes, then collect them into
maps using set semantics (on the keys). This approach allows us to start assigning (and sharing)
semantics at the attribute level across our libraries and applications.

so i guess what they're saying here is that instead of doing this throughout your application:

(def Card {:name str? :mana-cost int?})

you should instead be doing something like (unsure of the syntax here, making up this map-of function)

(def Card (map-of [::name ::mana-cost]))

i guess that makes sense!

ok, apparently the (s/keys) macro is what i was looking for

http://clojure.github.io/clojure/branch-master/clojure.spec-api.html#clojure.spec/keys

(s/def ::person (s/keys :req [::first-name ::last-name ::email]
                        :opt [::phone]))

"The map spec never specifies the value spec for the attributes, only what attributes are required or optional."

"Much existing Clojure code does not use maps with namespaced keys and so keys can also specify
:req-un and :opt-un for required and optional unqualified keys."

"Unqualified keys can also be used to validate record attributes"

i don't really understand what's up with keys* - it talks about how it "can be embedded inside
a sequential regex structure". what's that?

gives as example:

(s/def ::server (s/keys* :req [::id ::host] :opt [::port]))
(s/conform ::server [::id :s1 ::host "example.com" ::port 5555])

hm ok i guess - so keys* is for validating kwargs for functions?

s/merge is for combining entity maps

this focus on use of namespaced registered keywords is interesting - it's basically equivalent to just
doing regular defs, like (def Foo {:bar :baz}), and just passing Foo around, but instead
we're doing (s/def ::foo {:bar :baz}) and referring to ::foo everywhere. wonder what that buys us?

is it mainly for performance reasons (not passing around tons of data, if that even matters),
or is this nice for some other reason?

maybe it's nice because you don't have to actually import voke.specs to refer to ::voke.specs/foo,
as seen below:

user=> :foo.bar/baz
:foo.bar/baz
user=> ::foo
:user/foo
user=> :user/foo
:user/foo
user=> (= :user/foo ::foo)
true

that does seem like a pretty compelling reason; i had trouble avoiding circular-import errors
when using Schema and doing the passing-around-Foo-everywhere style mentioned above. cool neat

ok also yeah uh there is the obvious bit where namespaced keywords are good map keys

right so in schema land, you're usually doing things like {:foo Foo}, and also referring directly
to Foo throughout your code; but in spec-land, ::foo serves both of those purposes (?)

not sure how i feel about multi-spec, wonder if anyone uses it

"The multi-spec approach allows us to create an open system for spec validation, just like
multimethods and protocols. New event types can be added later by just extending the event-type multimethod."

special collection functions:
coll-of, tuple, map-of

"Both coll-of and map-of will conform all of their elements, which may make them unsuitable
for large collections. In that case, consider every or for maps every-kv." hm

on s/cat vs s/tuple:
"The choice between a regular expression and tuple here is to some degree a matter of taste,
possibly informed by whether you expect either the tagged return values or error output to
be better with one or the other."

"Spec also defines one additional regex operator, &, which takes a regex operator and constrains
it with one or more additional predicates."

(s/assert) exists, asserts are off by default but can be toggled on

(s/fdef) is the good shit, lets you spec a function.
interesting that rather than going the route schema did and providing an alternate implementation
of `defn` that has new syntax, they prefer to do this:

(defn foo [etc] bar)

(s/fdef foo :args something :ret bla)

it makes sense - these guys want to keep the language's syntax as simple as possible - it's just interesting

"Because the args are sequential and the args are positional fields, they are almost always
described using a regex op, like cat, alt, or *."

s/fspec for higher order functions

there's a typo on the guide -
"so often it’s not helpful to spec the :ret value of a function (as it’s just code)."
should read
" so often it’s not helpful to spec the :ret value of a macro (as it’s just code)."

might be fun to figure out how to contribute a fix

"The Clojure macroexpander will look for and conform :args specs registered for macros at
macro expansion time (not runtime!)."

that's neat

fdef still feels kinda clumsy to me - eg
:args (s/cat :game ::game)

vs

[game :- Game]

again, i get that they don't want to introduce new syntax, but i hope that there's some sort
of nice sugar so you don't have to always do (s/cat :foo ::foo :bar ::bar)

i wonder if fdef's :fn ever gets used, seems like a nice-to-have that nobody would use in practice

submitting a PR to the spec guide was really easy, https://github.com/clojure/clojure-site/pull/139
gj github, nice simple UI flow for the whole process

"The s/gen function can be used to obtain the generator for any spec."

(s/exercise-fn) looks pretty neat! the example usage looks like this:

(s/exercise-fn `ranged-rand)

i'm not sure what the backtick quote is for in this context?

"Instrument takes a fully-qualified symbol so we use ` here to resolve it in the context
of the current namespace."

...huh. hm. what?
i guess this is the var equivalent of doing ::a-keyword
ok i guess

"Spec does not trust custom generators and any values they produce will also be checked
by their associated spec to guarantee they pass conformance."

nice

gen/fmap looks neat, very useful in the examples they give for custom generator use cases

**************
"We mentioned earlier that clojure.spec.test provides tools for automatically testing functions.
When functions have specs, we can use check, to automatically generate tests that check the
function using the specs."

neat!

"To test all of the spec’ed functions in a namespace (or multiple namespaces), use enumerate-namespace
to generate the set of symbols naming vars in the namespace"

(-> (stest/enumerate-namespace 'user) stest/check)

double-neat!

wonder if that works on `instrument`

http://blog.cognitect.com/blog/2016/9/15/works-on-my-machine-understanding-var-bindings-and-roots
explains what the term "root" means in the context of vars

explains difference between (binding) and (with-redefs) - the former alters a dynamic var's bindings
/ frames, the latter temporarily alters a var's root

"Var roots are global. Var dynamic bindings are thread-local, and dynamically scoped."

=========

9/16/16

http://leeorengel.com/from-schema-to-spec/

acknowledges that spec is noticeably more verbose than schema

i skimmed the parts where he's actually writing test.check tests, but this looks like a
useful resource to go back to when i'm interested in actually doing that stuff

"Compared to spec, schema felt a bit more natural to me at first coming from a more strongly
typed background as the schema information is right there next to what it is specifying."

same here, minus the strongly typed background

says spec is "more composable" and "feels like it fits into the language more naturally",
which i do also have to agree with

"I’ve seen some debate about where the best place to put specs are; to me it seems pretty
logical to co-locate them directly with the code they spec."

that's what i would do in schema if i didn't have to worry about circular imports so often
so i'll probably eventually go back to doing this
right now i think everything's in voke.schema

anyway good article, well written

http://www.lispcast.com/clojure.spec-vs-schema

"The library is a collection of small tools that do different jobs that can be used together.
There is a tool for maps (called keys) that checks for the presence of required and optional
keys and checks that their values conform to the named attribute. There is a tool for sequences
that uses regular expression operators."

good point yeah - in spec, maps -> (keys), sequences -> regex operators

"The keys function takes a list of required keywords which must be namespaced. Those keywords
play double-duty. They check for the presence of required keys and they name the spec that
the value must conform to."

http://gigasquidsoftware.com/blog/2016/05/29/one-fish-spec-fish/

is fine

http://derek.troywest.com/articles/the-elements-of-style

"If you find a pure function named this-and-that refactor `this` and `that` and compose elsewhere."

https://github.com/bbatsov/clojure-style-guide/issues/124

"We will not be adding any other "-" forms to core. I think perhaps if we could do it over,
defn- would not be added either, but we're not going to take it away."

interesting

https://stuartsierra.com/2015/05/10/clojure-namespace-aliases is good

https://stuartsierra.com/2015/08/25/clojure-donts-lazy-effects
***** i like this

"Never mix side effects with lazy operations."

https://github.com/jonase/kibit

TODO set up kibit

https://github.com/tolitius/boot-check is a boot analog

okok
darwin recommends installing https://github.com/binaryage/cljs-devtools , taking a look

note that https://github.com/boot-clj/boot-cljs-devtools exists

https://github.com/binaryage/cljs-oops looks useful

apparently a way of not having to deal with externs files

"Instead of (.-nativeProp obj) write (aget obj "nativeProp") which compiles to obj["nativeProp"]"

TODO take a look at cljs-oops next time i have to deal with anything related to externs files

=======

9/17/16

https://www.youtube.com/watch?v=VNTQ-M_uSo8

https://www.youtube.com/watch?v=dSqLt8BgbRQ

i like his bit about how when you're changing code, you're changing your mental model of the
system first, and then serializing that change back out into code, around 9 minute mark

cute idea - use code coverage tools to reduce a function into just the lines that actually
get executed by running your test case, calls it a program slice

https://www.youtube.com/watch?v=_9RgHXqH8J0
****** good talk on graphql

https://www.youtube.com/watch?v=mty0RwkPmE8&list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&index=11
history of clojurescript

=======

9/18/16

right - the whole point of connecting intellij to your dirac repl (or to whatever other repl you're using)
is so that you can get vim-fireplace-like behavior in intellij, by using cmd-shift-p / etc to evaluate
forms, and play around with things that way. right right.

https://medium.freecodecamp.com/javascript-modules-a-beginner-s-guide-783f7d7a5fcc#.g2dt5cawr
*****
super good article on js modules

https://medium.freecodecamp.com/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b#.kpqslvqr1
great intro to docker

https://www.youtube.com/watch?v=33mTFjPIN10&list=PLetHPRQvX4a_jQjvn54Q-d1WYZ52nDfnT&index=7
this guy's totally in love with klipse, an in-browser clojurescript/python/ruby/etc repl

looks neat
apparently a main selling point is that it's super-live, and also that it's totally clientside,
you just add a <script> tag to your page (blog post, etc) and it's there, no need
to worry about eg uploading something to gist.github.com and then including an iframe or whatever, etc
https://github.com/viebel/klipse

https://github.com/aengelberg/loco
constraint based programming
looks like it'd be useful for project euler

https://github.com/sbelak/huri
library for data science
http://viewer.gorilla-repl.org/view.html?source=github&user=sbelak&repo=huri&path=examples/examples.cljw neat examples

http://gorilla-repl.org/ hadn't heard of this before
clojure notebook repl
https://github.com/JonyEpsilon/lein-gorilla

https://news.ycombinator.com/item?id=11991479
one repo vs many repos
google has one giant repo (?!?!?!?!?!)
https://www.youtube.com/watch?v=W71BTkUbdqE
*****

https://www.youtube.com/watch?v=Rzdxgx3RC0Q
caching at netflix
some of this went over my head, not too much tho
https://github.com/Netflix/rend
good narrative documentation

=========

9/19/16

https://www.youtube.com/watch?v=6IYm34nDL64
clojurescript + react native + mobile apps

https://www.youtube.com/watch?v=Oh5oC98ztvI
great behind-the-scenes talk on graphql + its history

https://www.youtube.com/watch?v=Elg17s_nwDg
great talk on the cljs compiler
******* really good talk

========

9/20/16

https://www.youtube.com/watch?v=_1rh_s1WmRA
ztellman on a frontend server he built at fitbit
pumpkin carver parable
"in every case, having many many people serving one queue will give you the best behavior
under adverse conditions" - money quote
*****************
talks about load balancing approaches
round robin, least in flight
"you improve what you measure" -> "everything you ignore will get worse"
good shit
for his frontend server, it makes more sense to track _overhead_ as opposed to total latency
makes sense
his key metrics: p999 overhead, request rate, error rate

https://www.youtube.com/watch?v=n7aE6k8o_BU
pattern matching
i like his bit about the start/work/end pattern in recursion, around the 36:00 mark

https://www.youtube.com/watch?v=0rmR80neExo&list=PLNoHgLVTxtaqo1c_V2I-8wkDrCGImb9v5&index=4
datomic in production
great speaker

http://patrickgombert.github.io/2015/datomic-performance/
datomic perf notes, bit over my head atm since i've never used it

http://www.learndatalogtoday.org/
datalog tutorial - looks really cool actually

https://github.com/lambdaisland/thirdpartyjs
how to use third party js libraries in cljs

https://betterexplained.com/articles/matrix-multiplication/

ok so anyway
i was super confused for like two weeks because i thought dirac was necessary for debugging cljs
turns out you can just call (js-debugger) and use chrome devtools
i used to know this, but had completely forgotten it because i put programming down for like six months

so i'm trying to figure out why sometimes you (or the monster) teleport

i have a sneaking suspicion that it's related to the fact that there's this JS collision system,
and it's always 100% kept up-to-date with every entity's location + bounding box and is updated multiple
times per tick,
and there's the list of cljs entities that we're processing this tick, and they're updated a total of
once per tick
and so these two sources of truth can get out of sync with one another, and anyway that seems like
a potentially super bad situation
also, i could swear i've seen at least one xxx comment saying "diagonal collision resolution will need this info"
which seems relevant

trying to get the issue to repro now, so i can verify that regular chrome devtools (plus cljs-devtools)
is all you need to debug cljs

this is super difficult to repro, so what i really need is a reliable failing test case / reproduction

ok, got a repro

new-center: 10.446 (that seems really low, wtf)
ok this is weird, here's what i'm looking at:
https://www.evernote.com/shard/s11/sh/edad4953-6aa4-4011-a59b-fa265ab2f6b2/6e46cf56db9cff72

i'm seeing two different values for new-center, one's 10.4, the other's a map
some sort of weird artifact with cljs-devtools?
ignoring the first one for now - i think that's supposed to be x-distance, not new-center

yeah, and here where it says "voke.events/publish-event", i think it should say "entity"
if i could repro *that*, could contribute a fix to the cljs-devtools project
but let's put that aside for now and focus on the bug in my app

ok so entity is the monster, and looks like this:
https://www.evernote.com/shard/s11/sh/ba234b99-1298-45a4-9f88-e8605e2f3379/5108c7f256f8b026
(cljs-devtools map formatting is actually really good, nice)

so new-center is (408.7, 257.6)
new-velocity is (0, 0)
current center is (398.2, 252)
current velocity is (0, -3.2)

seems odd that x velocity is 0
it looks like this atm
https://www.evernote.com/shard/s11/sh/326d398d-9154-4561-9b88-064ae36a41bf/8830244b7113be66
its left side is stuck up against the player, and it's trying to move up, so the current velocity
actually makes a lot of sense

so if the current velocity is (0, -3.2), then why are we trying to move this thing to the
right by ten pixels? that would indicate of a velocity of (10, -3.2), which we are *not* seeing
so let's go up the callstack

ok, we're in resolve-diagonal-collision - this is probably where the teleportation bug is!
seeing more cljs-devtools formatting errors - i see 4 things named entity, for instance; ugh
definitely gonna have to look into this and see if i can fix it... anyway

here are our variables:
https://www.evernote.com/shard/s11/sh/f17d497f-b8ba-43f7-95b0-25f04e151219/e6cbbf0e8fab51ab
https://www.evernote.com/shard/s11/sh/8159036c-5fe7-4e8b-b4d3-eeae24593851/2606d4892fec8781

so again, entity is our bad guy, and he's got a
position of (398.2, 252.05)
velocity of (0, -3.2)

and he's colliding with the good guy, who's got a
position of (373.27, 232.48)
velocity of (-0.065, -4.8)

and these guys are 25px by 25px
so currently their centers are 24.93px apart on the x axis
and 19.57px apart on the y axis

that doesn't seem right
ok cool, rounding error on my part just now - they're actually 25.01px apart on the x axis
but definitely only 19.57px apart on the y axis
but that part doesn't matter, because they're > 25px apart on the x axis, so they are currently not overlapping
so that's cool

so wait - if they're currently not overlapping because they're >25px apart on the x axis,
and their x axes are moving _away_ from each other (good guy is moving slightly to the left, and is
to the left of the bad guy)
then why the hell are we in resolve-diagonal-collision in the first place?

time to go up the call stack
this cljs devtools naming issue is really frustrating
also i can't seem to evaluate arbitrary expressions at breakpoint time, like i can't put a watch on
(finder :x), etc

i bet that's what dirac would be useful for - having a repl available right now

ok so anyway new-center is (397.3, 248.853)
new-velocity is (-0.97, -3.2)
that's interesting - so the monster is trying to move left after all! that actually makes a lot of sense
let's go back down the callstack again

yeah ok right - i was looking at `velocity` earlier but i should have been looking at `new-velocity`
still, though, is this really a diagonal collision? feels like this is a straightforward situation
where the monster is trying to move up and left, and up is clear but left is not clear,
and so it should be allowed to move up but not left

i wonder if this has to do with the 0.1px no-man's-land spacing between entities
back up the call stack

so in move-to-closest-clear-spot, we have
new-center (397.3, 248.85)
new-velocity (-0.97, -3.2)
x-position, x-velocity (397.3, -0.97)
y-position, y-velocity (248.85, -3.2)

i don't get why new-center's x and x-position's x are the same
shouldn't new-center's x be something invalid, inside the good guy?

ok so the bad guy's center is currently (398.284, 252.05)
...and it's trying to move -0.97 pixels to the left, which puts it at 397.3px as the new x position

and it just so happens that good guy's x center is (373.274445, 232.48)

and 373.274445 + 12.5px is. 385.774
and that plus 12.5px is 398.274

and anyway so it just happens that.. what exactly?

incidentally, good guy is moving 0.06538px to the left on the x axis atm
which means that good guy's new x position (which we can't see atm) is 373.20462
and that plus 25px is 398.20462

ok let's recap
we have the bad guy, and he's trying to move up and to the left
he is currently touching the good guy on his left side, and his y-center is a little bit below good guy's

so is he clear to move to the left?
well, he's at 398.284445 right now
and he's trying to move to 397.3097869
and that _is_ indeed clear
wait is it

ok ONE MORE TIME
good guy's right edge is at x = 385.774445
bad guy's left edge is at x = 385.784445
bad guy has an x velocity of -0.97465
meaning that he wants to move his left edge so that it's at 384.809795
and that's no good

ugh but why have i been focusing so much on x position? of *course* bad guy wants to move to the left,
into good guy, and of *course* that isn't clear

well, i've been focused on this because i'm in move-to-nearest-clear-spot, and the way it works is by saying:
we've got an entity!
it's trying to move to new-center!
it's collided with one or more other entities!
what happens if we move it just vertically? was that successful?
what happens if we move it just horizontally? was that successful?
if both of those appear to have been successful, then we know it's a corner collision - handle that
if just one of them was successful, then go ahead and just apply that single-axis movement

and so in our situation it tries to move the entity vertically, and that succeeds
(y-position is equal to (new-center :y), y-velocity to (new-velocity :y)

and it tries to move the entity horizontally, and that *appears* to succeed
(x-position is equal to (new-center :x), x-velocity to (new-velocity :x))

but that's fucked up! moving the entity horizontally should not succeed
so what's going on in this call to (find-new-position-and-velocity-on-axis) ?
i think it might be too late to find that out since i don't have a working repl since we're in a breakpoint

that function has a call to find-cosest-clear-spot, which has a ton of scary comments in it
so that's probably where we're fucking up atm

=======

9/21/16

ok so where were we

so the issue is that we're in move-to-nearest-clear-spot, and we're trying to move bad guy up and to the left
he's clear if he moves straight up, but not clear if he moves to the left
right now, (move-to-nearest-clear-spot) calls (find-new-position-and-velocity-on-axis) in order to see if we're
clear on each axis.
that function returns a 2-tuple of [axis-clear-position axis-new-velocity]
and so what move-to-nearest-clear-spot does is: it checks on both x and y axes, and sees if those return values
are the same as the values that the entity is already trying to use to move.
so like let's say you're at x=10 and trying to move right by 1px;
you're trying to set yourself to x=11, and you're trying to set your new velocity to be ~1.
if find-new-position-and-velocity-on-axis returns [11 ~1], then that indicates that you're clear to move right
if it returns [10.5 0], though, that indicates that you ran into something

and so the issue is that bad guy is trying to move left, and it's *not* clear to move left, but
find-new-position-and-velocity-on-axis is reporting that it *is* clear to move left. so something
in that function's callstack is buggy.

so that function is basically a wrapper around find-closest-clear-spot

i can't figure out the best way of setting a breakpoint in there that only gets triggered when the issue happens
so i guess we'll just leave the current breakpoint as-is, add some logging to this function, and try
to repro again

notes from find-closest-clear-spot:

; ok so
; bad guy is at 398.284445
; good guy is at 373.27445
; the js collision system says that good guy's *actually* at 373.2221
; bad guy is trying to move to 397.30978
; bad guy's new velocity is -0.97465

; so arithmetic-fn is +
; shape2 center axis is 373.2221
; so the thing should be running (+ 373.2221 12.5 12.5 0.01)
; which is 398.2321
; which seems correct. but that's not what find-new-position-and-velocity-on-axis is returning
; so maybe this function isn't being called after all

i think that find-new-position-and-velocity-on-axis might not even be calling this function after all

ok so find-closest-clear-spot is exonerated, because if it were being used, the x-velocity that
find-new-position-etc returns would be 0. but it's not 0!
so something's going wrong with this set intersection.

blat blat blat blat blat

added some print statements

seems like the reason this is so hard to repro is that it has something to do with timing, not sure why

so i have a repro here that looks like we actually sincerely do have a corner-only collision

good guy is at (455.293, 125.876), velocity (-2.250, 0)
bad guy is at (478.340, 150.886), attempting to move to (477.169, 150.585)
so good guy's _actual_ x position is currently 452.8927

anyway so he's clear to move on the x, and he's clear to move on the y
so we try to resolve the corner collision

and it turns out that the corner collision algo tries to move him to (480.393, 160.778)
which is super incorrect - he's getting teleported 10px down for no reason

anyway now that i know this is a corner collision bug, i should be able to just find a repro
by putting good guy and bad guy at specific positions that trigger this bug

ok, added some more logging to resolve-diagonal

maybe it has something to do with the fact that we're basing these equations on the shape's
center, rather than its leading corner, which is what we _actually_ want to position?

good guy at (723.624, 196.997)
bad guy at (700.7, 222)
bad guy wants to move to (702, 221)
bad guy being moved to (698.524, 232.200) by resolve-diagonal

ok i did some math on paper
and i'm pretty convinced that the issue is that we're basing this line math on the entity's center
rather than its leading corner

so TODO:

1) make the math be based on its leading corner rather than its center
2) make sure resolve-diagonal gets up-to-date colliding-entity centers from the js collision system
   before it breaks them into lines

i'll deal with that stuff tomorrow

=======

9/22/16

ok, here's where i'm at

i think that the teleportation bug is caused by resolve-diagonal-collision using the center of
the moving entity, rather than its leading corner, as a basis for its math

so i'm going to change that and see if it fixes things

i also think that resolve-diagonal-collision needs to be given an up-to-date view of all of the relevant
collided entities' positions from the js collision system

i should make that change first, before the leading corner change, and see if there's a way to make this happen
at the top of the collision resolution system, rather than at leaf functions like resolve-diagonal and
find-closest-clear-spot

this bug took a long time to track down (assuming that i actually _have_ tracked it down).

i think that there are a few reasons for that, aside from me having forgotten how to program over the past
six months or so

the foremost one is that i had absolutely no intuition about what parts of the system were good and what
parts might be buggy. this is because there aren't any tests, at all, for any of this code. i think the
program is now big enough that it merits tests, so that future bug hunts don't take this long.

also the bug was somewhat difficult to figure out how to reproduce reliably - but (and again, this is assuming
that i'm correct about the bug being in resolve-diagonal-collision) after all, though, it was in a big function
that had been added to the system extremely recently and had no tests, and so if the function *were*
tested when it were written, it would have been obvious that it was buggy, and all of this could have been
avoided. so that's cool

i'm also going to start using github issues to track things i want to work on, because again
i think the program has gotten big enough that there's value in that sort of thing

ok, cool
so let's start with giving the resolution system the most up-to-date view of the relevant collided entities

ok that was easier than expected
and i did the leading corner stuff to resolve-diagonal-collision

so i think we're more stable now
i did see one bizarre situation where it looked like there was a ghost player/monster-sized square
i'm going to hope that that was just an artifact from a weird figwheel reload
if i see it again in a non-figwheel situation then i can worry about it

ok, all done! merged the branch into master

time to start on tests first, i think. let's just get something super super simple running

howwww do i test cljs again

http://www.agynamix.de/posts/2015-09-22-doo-and-figwheel.html
this guy's creating a runner.js file by hand which he uses to make phantom run his tests
i don't think he knows about doo

https://github.com/bensu/doo/wiki/End-to-end-testing-example cool info on running full end-to-end tests
with a clojurescript frontend and a clj backend with just a single `lein test` command

http://www.lispcast.com/testing-clojurescript
***** ok this is super super super good
great context / narrative

http://www.agynamix.de/posts/2015-09-22-doo-and-figwheel.html documents an issue i remember running into actually
good job to this guy
hopefully figwheel's fixed its error since then though

========

9/23/16

https://gist.github.com/alandipert/4669472
interesting pattern for using a particular type of macro in cljs - guy's interested in locality,
so in the same cljs file where the macro is used, you can see what it's actually doing
i guess you could do this for lots of different kinds of macros, as long as you don't need access
to macros' ability to suppress/delay the evaluation of their inputs

travis or circleci?
travis seems more popular, have already used it with cljstone
https://mediocre.com/forum/topics/a-tale-of-two-ci-tools-differentiating-travis-and-circleci
these guys did a pretty exhaustive comparison, and circleci comes out sounding better
plus they use clojure, so what the hell, let's give 'em a shot
if i hate it, i can always switch to travis really easily
meh fuck it let's stick with travis, circleci doesn't seem to notice the doo plugin even though
it's defined clearly in my project.clj
...oh right, wrong branch

========

9/24/16

https://jstaffans.github.io/2015/11/19/fun-with-specter.html
**** dece

https://github.com/technomancy/leiningen/blob/stable/doc/TUTORIAL.md#checkout-dependencies this exists

spent a few minutes thinking about a workflow for automatically running tests (easy with doo)
so that i can immediately see their output in the browser (via figwheel) or in the editor (with cursive)
ended up just going with this super simple approach:
use the Terminal intellij plugin (accessible via hovering over the bottom left corner of the editor and clicking
Terminal) and just run `lein doo phantom test` in there
good to go
i wonder if there's a way to colorize the output from this command?

http://blog.venanti.us/ultra/
https://github.com/greglook/whidbey/ - repl colorization, doesn't do anything for tests though
installed it, repl colorization is nice, neat
https://github.com/brentonashworth/lein-difftest exists but just for clojure and is super old
https://github.com/greglook/puget - looks like it's clj-only atm

might have to make a lein plugin myself that does this, or fork doo to add support
i don't know anything about terminal colors
but http://blog.jayfields.com/2012/05/clojure-expectations-colorized.html seems like a good jumping-off point

i tried out specter briefly in state-test; i don't think it buys us anything over (get-in) in this particular
situation, but it might become useful for transforms or more complicated selects if i run into situations
where i have those. had a little trouble figuring out the relevant ns form - wasn't immediately clear
what the relevant namespaces were, what's a macro, what's not a macro, how do i require macros again, etc -
so i'm just jotting down what that ended up looking like here

(ns voke.state-test
  (:require [cljs.test :refer [deftest is testing]]
            [com.rpl.specter :refer [ALL]]
            [voke.state :as state])
  (:require-macros [com.rpl.specter :refer [select]]))

(def blank-game-state (state/make-game-state []))

(deftest adding-entities
  (with-redefs [state/buffer (atom [])]
    (state/add-entity! {:id 0 :renderable false} :combat-system)

    (print (select ALL blank-game-state))

    (let [updated-state ((state/flush!) blank-game-state)]

      (print (select ALL updated-state))
      (print (select [:entities 0] updated-state))
      (is (= (get-in updated-state [:entities 0])
             {:id 0 :renderable false})))))

====

9/25/16

ok, i've been working on testing handle-keyboard-events

it's pretty straightforward, except for two things:
1) can't figure out an elegant way to wait for the implementation of handle-keyboard-events
   to actually do its work, since it happens in a go block. i've got a (<! (timeout 100))
   using the implementation provided in https://gist.github.com/swannodette/5882703 , and that's
   working fine, but it's obviously gross and potentially flaky.
2) this function manipulates both the :input and the :motion components, which i guess makes sense
   but for some reason i thought it was only the :input component. seems to have a write-only relationship
   with the :motion component.

re: colorization in cljs.test output, @pat says:
@jrheard assuming you are using a unix terminal you will have to create a custom report
function that uses ansi escape codes; Figwheel uses ansi colors, id look there

cool, been doing lots of testing, that's been going pretty well.

things left to test:

voke.system.core (done)
ai system
collision system
attack system
movement system
rendering system (?)
